// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.Link = (function(_super) {
    var $a;

    __extends(Link, _super);

    /* $a = alias for sirius namespace
    */


    function Link() {
      return Link.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    Link.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    Link.from_xml2 = function(xml, deferred, object_with_id) {
      var LinkGeometry, begin, description, dynamics, end, id, lane_offset, lanes, length, name, obj, record, road_name, type;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.Link();
      description = xml.children('description');
      obj.set('description', $a.Description.from_xml2(description, deferred, object_with_id));
      begin = xml.children('begin');
      obj.set('begin', $a.Begin.from_xml2(begin, deferred, object_with_id));
      end = xml.children('end');
      obj.set('end', $a.End.from_xml2(end, deferred, object_with_id));
      dynamics = xml.children('dynamics');
      obj.set('dynamics', $a.Dynamics.from_xml2(dynamics, deferred, object_with_id));
      LinkGeometry = xml.children('LinkGeometry');
      obj.set('linkgeometry', $a.LinkGeometry.from_xml2(LinkGeometry, deferred, object_with_id));
      name = $(xml).attr('name');
      obj.set('name', name);
      road_name = $(xml).attr('road_name');
      obj.set('road_name', road_name);
      lanes = $(xml).attr('lanes');
      obj.set('lanes', Number(lanes));
      lane_offset = $(xml).attr('lane_offset');
      obj.set('lane_offset', Number(lane_offset));
      length = $(xml).attr('length');
      obj.set('length', Number(length));
      type = $(xml).attr('type');
      obj.set('type', type);
      id = $(xml).attr('id');
      obj.set('id', id);
      record = $(xml).attr('record');
      obj.set('record', record != null ? record.toString().toLowerCase() === 'true' : void 0);
      if (object_with_id.link) {
        object_with_id.link[obj.id] = obj;
      }
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    Link.prototype.to_xml = function(doc) {
      var xml;
      xml = doc.createElement('link');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('description')) {
        xml.appendChild(this.get('description').to_xml(doc));
      }
      if (this.has('begin')) {
        xml.appendChild(this.get('begin').to_xml(doc));
      }
      if (this.has('end')) {
        xml.appendChild(this.get('end').to_xml(doc));
      }
      if (this.has('dynamics')) {
        xml.appendChild(this.get('dynamics').to_xml(doc));
      }
      if (this.has('linkgeometry')) {
        xml.appendChild(this.get('linkgeometry').to_xml(doc));
      }
      if (this.has('name')) {
        xml.setAttribute('name', this.get('name'));
      }
      if (this.has('road_name')) {
        xml.setAttribute('road_name', this.get('road_name'));
      }
      if (this.has('lanes')) {
        xml.setAttribute('lanes', this.get('lanes'));
      }
      if (this.has('lane_offset') && this.lane_offset !== 0) {
        xml.setAttribute('lane_offset', this.get('lane_offset'));
      }
      if (this.has('length')) {
        xml.setAttribute('length', this.get('length'));
      }
      if (this.has('type')) {
        xml.setAttribute('type', this.get('type'));
      }
      if (this.has('id')) {
        xml.setAttribute('id', this.get('id'));
      }
      if (this.has('record') && this.record !== true) {
        xml.setAttribute('record', this.get('record'));
      }
      return xml;
    };

    Link.prototype.deep_copy = function() {
      return Link.from_xml1(this.to_xml(), {});
    };

    Link.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    Link.prototype.make_tree = function() {
      return null;
    };

    return Link;

  })(Backbone.Model);

}).call(this);
