// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.Scenario = (function(_super) {
    var $a;

    __extends(Scenario, _super);

    /* $a = alias for sirius namespace
    */


    function Scenario() {
      return Scenario.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    Scenario.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    Scenario.from_xml2 = function(xml, deferred, object_with_id) {
      var ControllerSet, DecisionPoints, DemandProfileSet, DownstreamBoundaryCapacityProfileSet, EventSet, FundamentalDiagramProfileSet, InitialDensitySet, NetworkConnections, NetworkList, ODDemandProfileSet, ODList, RouteSegments, SensorList, SignalList, SplitRatioProfileSet, WeavingFactorSet, description, id, name, obj, schemaVersion, settings;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.Scenario();
      description = xml.children('description');
      obj.set('description', $a.Description.from_xml2(description, deferred, object_with_id));
      settings = xml.children('settings');
      obj.set('settings', $a.Settings.from_xml2(settings, deferred, object_with_id));
      NetworkList = xml.children('NetworkList');
      obj.set('networklist', $a.NetworkList.from_xml2(NetworkList, deferred, object_with_id));
      SignalList = xml.children('SignalList');
      obj.set('signallist', $a.SignalList.from_xml2(SignalList, deferred, object_with_id));
      SensorList = xml.children('SensorList');
      obj.set('sensorlist', $a.SensorList.from_xml2(SensorList, deferred, object_with_id));
      InitialDensitySet = xml.children('InitialDensitySet');
      obj.set('initialdensityset', $a.InitialDensitySet.from_xml2(InitialDensitySet, deferred, object_with_id));
      WeavingFactorSet = xml.children('WeavingFactorSet');
      obj.set('weavingfactorset', $a.WeavingFactorSet.from_xml2(WeavingFactorSet, deferred, object_with_id));
      SplitRatioProfileSet = xml.children('SplitRatioProfileSet');
      obj.set('splitratioprofileset', $a.SplitRatioProfileSet.from_xml2(SplitRatioProfileSet, deferred, object_with_id));
      DownstreamBoundaryCapacityProfileSet = xml.children('DownstreamBoundaryCapacityProfileSet');
      obj.set('downstreamboundarycapacityprofileset', $a.DownstreamBoundaryCapacityProfileSet.from_xml2(DownstreamBoundaryCapacityProfileSet, deferred, object_with_id));
      EventSet = xml.children('EventSet');
      obj.set('eventset', $a.EventSet.from_xml2(EventSet, deferred, object_with_id));
      DemandProfileSet = xml.children('DemandProfileSet');
      obj.set('demandprofileset', $a.DemandProfileSet.from_xml2(DemandProfileSet, deferred, object_with_id));
      ControllerSet = xml.children('ControllerSet');
      obj.set('controllerset', $a.ControllerSet.from_xml2(ControllerSet, deferred, object_with_id));
      FundamentalDiagramProfileSet = xml.children('FundamentalDiagramProfileSet');
      obj.set('fundamentaldiagramprofileset', $a.FundamentalDiagramProfileSet.from_xml2(FundamentalDiagramProfileSet, deferred, object_with_id));
      NetworkConnections = xml.children('NetworkConnections');
      obj.set('networkconnections', $a.NetworkConnections.from_xml2(NetworkConnections, deferred, object_with_id));
      ODList = xml.children('ODList');
      obj.set('odlist', $a.ODList.from_xml2(ODList, deferred, object_with_id));
      RouteSegments = xml.children('RouteSegments');
      obj.set('routesegments', $a.RouteSegments.from_xml2(RouteSegments, deferred, object_with_id));
      DecisionPoints = xml.children('DecisionPoints');
      obj.set('decisionpoints', $a.DecisionPoints.from_xml2(DecisionPoints, deferred, object_with_id));
      ODDemandProfileSet = xml.children('ODDemandProfileSet');
      obj.set('oddemandprofileset', $a.ODDemandProfileSet.from_xml2(ODDemandProfileSet, deferred, object_with_id));
      id = $(xml).attr('id');
      obj.set('id', id);
      name = $(xml).attr('name');
      obj.set('name', name);
      schemaVersion = $(xml).attr('schemaVersion');
      obj.set('schemaVersion', schemaVersion);
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    Scenario.prototype.to_xml = function(doc) {
      var xml;
      xml = doc.createElement('scenario');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('description')) {
        xml.appendChild(this.get('description').to_xml(doc));
      }
      if (this.has('settings')) {
        xml.appendChild(this.get('settings').to_xml(doc));
      }
      if (this.has('networklist')) {
        xml.appendChild(this.get('networklist').to_xml(doc));
      }
      if (this.has('signallist')) {
        xml.appendChild(this.get('signallist').to_xml(doc));
      }
      if (this.has('sensorlist')) {
        xml.appendChild(this.get('sensorlist').to_xml(doc));
      }
      if (this.has('initialdensityset')) {
        xml.appendChild(this.get('initialdensityset').to_xml(doc));
      }
      if (this.has('weavingfactorset')) {
        xml.appendChild(this.get('weavingfactorset').to_xml(doc));
      }
      if (this.has('splitratioprofileset')) {
        xml.appendChild(this.get('splitratioprofileset').to_xml(doc));
      }
      if (this.has('downstreamboundarycapacityprofileset')) {
        xml.appendChild(this.get('downstreamboundarycapacityprofileset').to_xml(doc));
      }
      if (this.has('eventset')) {
        xml.appendChild(this.get('eventset').to_xml(doc));
      }
      if (this.has('demandprofileset')) {
        xml.appendChild(this.get('demandprofileset').to_xml(doc));
      }
      if (this.has('controllerset')) {
        xml.appendChild(this.get('controllerset').to_xml(doc));
      }
      if (this.has('fundamentaldiagramprofileset')) {
        xml.appendChild(this.get('fundamentaldiagramprofileset').to_xml(doc));
      }
      if (this.has('networkconnections')) {
        xml.appendChild(this.get('networkconnections').to_xml(doc));
      }
      if (this.has('odlist')) {
        xml.appendChild(this.get('odlist').to_xml(doc));
      }
      if (this.has('routesegments')) {
        xml.appendChild(this.get('routesegments').to_xml(doc));
      }
      if (this.has('decisionpoints')) {
        xml.appendChild(this.get('decisionpoints').to_xml(doc));
      }
      if (this.has('oddemandprofileset')) {
        xml.appendChild(this.get('oddemandprofileset').to_xml(doc));
      }
      if (this.has('id')) {
        xml.setAttribute('id', this.get('id'));
      }
      if (this.has('name')) {
        xml.setAttribute('name', this.get('name'));
      }
      if (this.has('schemaVersion')) {
        xml.setAttribute('schemaVersion', this.get('schemaVersion'));
      }
      return xml;
    };

    Scenario.prototype.deep_copy = function() {
      return Scenario.from_xml1(this.to_xml(), {});
    };

    Scenario.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    Scenario.prototype.make_tree = function() {
      return null;
    };

    return Scenario;

  })(Backbone.Model);

}).call(this);
