// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.MapNetworkView = (function(_super) {
    var $a, ERROR_MSG, WARNING_MSG;

    __extends(MapNetworkView, _super);

    function MapNetworkView() {
      return MapNetworkView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    WARNING_MSG = 'Directions API Warning(s):';

    ERROR_MSG = 'Directions API Error: Could not render link :';

    MapNetworkView.prototype.initialize = function(scenario) {
      var _this = this;
      this.scenario = scenario;
      this.networks = this.scenario.get('networklist').get('network');
      this._initializeCollections();
      _.each(this.networks, function(network) {
        return _this._drawNetwork(network);
      });
      this._drawScenarioItems();
      new $a.TreeView({
        scenario: this.scenario,
        attach: "#right_tree"
      });
      return this.render();
    };

    MapNetworkView.prototype.render = function() {
      $a.broker.trigger('map:init');
      $a.broker.trigger('app:main_tree');
      return this;
    };

    MapNetworkView.prototype._initializeCollections = function() {
      var list;
      list = $a.models.get('networklist').get('network')[0].get('nodelist');
      $a.nodeList = new $a.NodeCollection(list.get('node'));
      list = $a.models.get('networklist').get('network')[0].get('linklist');
      $a.linkList = new $a.LinkCollection(list.get('link'));
      list = $a.models.get('sensorlist');
      return $a.sensorList = new $a.SensorCollection(list.get('sensor'));
    };

    MapNetworkView.prototype._drawScenarioItems = function() {
      if (this.scenario.get('sensorlist') != null) {
        this._drawSensors(this.scenario.get('sensorlist').get('sensor'));
      }
      if (this.scenario.get('controllerset') != null) {
        this._drawControllers(this.scenario.get('controllerset').get('controller'));
      }
      if (this.scenario.get('eventset') != null) {
        this._drawEvents(this.scenario.get('eventset').get('event'));
      }
      if (this.scenario.get('signallist') != null) {
        return this._drawSignals(this.scenario.get('signallist').get('signal'));
      }
    };

    MapNetworkView.prototype._drawNetwork = function(network) {
      $a.map.setCenter($a.Util.getLatLng(network));
      this._drawRoute(network);
      if (network.get('nodelist') != null) {
        return this._drawNodes(network.get('nodelist').get('node'), network);
      }
    };

    MapNetworkView.prototype._drawRoute = function(network) {
      this.directionsService = new google.maps.DirectionsService();
      return this._requestLink(network.get('linklist').get('link').length - 1, network);
    };

    MapNetworkView.prototype._requestLink = function(indexOfLink, network) {
      var begin, end, link, params, request;
      if (indexOfLink > -1) {
        link = network.get('linklist').get('link')[indexOfLink];
        begin = link.get('begin').get('node');
        end = link.get('end').get('node');
        request = {
          origin: $a.Util.getLatLng(begin),
          destination: $a.Util.getLatLng(end),
          travelMode: google.maps.TravelMode.DRIVING
        };
        params = {
          request: request,
          linkModel: link,
          network: network,
          attempts: 0
        };
        this._directionsRequest(params);
        return this._requestLink(indexOfLink - 1, network);
      } else {
        return $a.broker.trigger('app:show_message:success', 'Loaded map successfully');
      }
    };

    MapNetworkView.prototype._directionsRequest = function(params) {
      var _this = this;
      return this.directionsService.route(params.request, function(response, status) {
        var msg, rte;
        if (status === google.maps.DirectionsStatus.OK) {
          rte = response.routes[0];
          if (rte.warnings.length > 0) {
            msg = "" + WARNING_MSG + " " + rte.warnings;
            $a.broker.trigger('app:show_message:info', msg);
          }
          return _this._drawLink(params, rte.legs);
        } else if (_this._isOverQuery(status) && params.attempts < 3) {
          return setTimeout((function() {
            return _this._directionsRequest(params);
          }), 3000);
        } else {
          return $a.broker.trigger('app:show_message:error', "" + ERROR_MSG + " " + status);
        }
      });
    };

    MapNetworkView.prototype._isOverQuery = function() {
      return status === google.maps.DirectionsStatus.OVER_QUERY_LIMIT;
    };

    MapNetworkView.prototype._drawLink = function(params, legs) {
      return new $a.MapLinkView(params.linkModel, params.network, legs);
    };

    MapNetworkView.prototype._drawNodes = function(nodes, network) {
      return _.each(nodes, function(i) {
        return new $a.MapNodeView(i, network);
      });
    };

    MapNetworkView.prototype._drawSensors = function(sensors) {
      return _.each(sensors, function(i) {
        return new $a.MapSensorView(i);
      });
    };

    MapNetworkView.prototype._drawEvents = function(events) {
      return _.each(events, function(i) {
        return new $a.MapEventView(i);
      });
    };

    MapNetworkView.prototype._drawControllers = function(controllers) {
      return _.each(controllers, function(i) {
        return new $a.MapControllerView(i);
      });
    };

    MapNetworkView.prototype._drawSignals = function(signals) {
      return _.each(signals, function(i) {
        if ($a.Util.getLatLng(i) != null) {
          return new $a.MapSignalView(i);
        }
      });
    };

    return MapNetworkView;

  })(Backbone.View);

}).call(this);
