// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.BrowserNodeView = (function(_super) {
    var $a;

    __extends(BrowserNodeView, _super);

    function BrowserNodeView() {
      return BrowserNodeView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    BrowserNodeView.prototype.initialize = function() {
      var _this = this;
      $a.nodeList.forEach(function(node) {
        return node.on('change', _this.rePopulateTable, _this);
      });
      return BrowserNodeView.__super__.initialize.call(this, {
        elem: 'node'
      });
    };

    BrowserNodeView.prototype.render = function() {
      this.$el.dialog({
        width: 600
      });
      return BrowserNodeView.__super__.render.apply(this, arguments);
    };

    BrowserNodeView.prototype.renderEditor = function(models) {
      if (models == null) {
        models = [$a.nodeList.at(0)];
      }
      return BrowserNodeView.__super__.renderEditor.call(this, new $a.EditorNodeView({
        models: models,
        elem: this.elem,
        width: 300
      }));
    };

    BrowserNodeView.prototype._getData = function() {
      return $a.nodeList.getBrowserColumnData();
    };

    BrowserNodeView.prototype._getColumns = function() {
      var columns;
      return columns = [
        {
          "sTitle": "Id",
          "bVisible": false
        }, {
          "sTitle": "Name",
          "sWidth": "50%"
        }, {
          "sTitle": "Type",
          "sWidth": "50%"
        }
      ];
    };

    BrowserNodeView.prototype._getSelectedElems = function(selectedIds) {
      var selectedNodes;
      selectedNodes = $a.nodeList.filter(function(node) {
        if (_.include(selectedIds, node.get('id'))) {
          return node;
        }
      });
      return selectedNodes;
    };

    return BrowserNodeView;

  })(window.sirius.BrowserView);

  window.sirius.BrowserLinkView = (function(_super) {
    var $a;

    __extends(BrowserLinkView, _super);

    function BrowserLinkView() {
      return BrowserLinkView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    BrowserLinkView.prototype.initialize = function() {
      var _this = this;
      $a.linkList.forEach(function(link) {
        return link.on('change', _this.rePopulateTable, _this);
      });
      return BrowserLinkView.__super__.initialize.call(this, {
        elem: 'link'
      });
    };

    BrowserLinkView.prototype.render = function() {
      this.$el.dialog({
        width: 850
      });
      return BrowserLinkView.__super__.render.apply(this, arguments);
    };

    BrowserLinkView.prototype.renderEditor = function(models) {
      if (models == null) {
        models = [$a.linkList.at(0)];
      }
      return BrowserLinkView.__super__.renderEditor.call(this, new $a.EditorLinkView({
        models: models,
        elem: this.elem,
        width: 375
      }));
    };

    BrowserLinkView.prototype._getData = function() {
      return $a.linkList.getBrowserColumnData();
    };

    BrowserLinkView.prototype._getColumns = function() {
      var columns;
      return columns = [
        {
          "sTitle": "Id",
          "bVisible": false
        }, {
          "sTitle": "Name",
          "sWidth": "17%"
        }, {
          "sTitle": "Road Name",
          "sWidth": "17%"
        }, {
          "sTitle": "Type",
          "sWidth": "17%"
        }, {
          "sTitle": "Lanes",
          "sWidth": "17%"
        }, {
          "sTitle": "Begin",
          "sWidth": "16%"
        }, {
          "sTitle": "End",
          "sWidth": "16%"
        }
      ];
    };

    BrowserLinkView.prototype._getSelectedElems = function(selectedIds) {
      return $a.linkList.filter(function(link) {
        if (_.include(selectedIds, link.get('id'))) {
          return link;
        }
      });
    };

    return BrowserLinkView;

  })(window.sirius.BrowserView);

  window.sirius.BrowserSensorView = (function(_super) {
    var $a;

    __extends(BrowserSensorView, _super);

    function BrowserSensorView() {
      return BrowserSensorView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    BrowserSensorView.prototype.initialize = function() {
      var _this = this;
      $a.sensorList.forEach(function(sensor) {
        return sensor.on('change', _this.rePopulateTable, _this);
      });
      return BrowserSensorView.__super__.initialize.call(this, {
        elem: 'sensor'
      });
    };

    BrowserSensorView.prototype.render = function() {
      this.$el.dialog({
        width: 800
      });
      return BrowserSensorView.__super__.render.apply(this, arguments);
    };

    BrowserSensorView.prototype.renderEditor = function(models) {
      if (models == null) {
        models = [$a.sensorList.at(0)];
      }
      return BrowserSensorView.__super__.renderEditor.call(this, new $a.EditorSensorView({
        models: models,
        elem: this.elem,
        width: 300
      }));
    };

    BrowserSensorView.prototype._getData = function() {
      return $a.sensorList.getBrowserColumnData();
    };

    BrowserSensorView.prototype._getColumns = function() {
      var columns;
      return columns = [
        {
          "sTitle": "Id",
          "bVisible": false
        }, {
          "sTitle": "Type",
          "sWidth": "25%"
        }, {
          "sTitle": "Link Type",
          "sWidth": "25%"
        }, {
          "sTitle": "Links",
          "sWidth": "25%"
        }, {
          "sTitle": "Description",
          "sWidth": "25%"
        }
      ];
    };

    BrowserSensorView.prototype._getSelectedElems = function(selectedIds) {
      return $a.sensorList.filter(function(sensor) {
        if (_.include(selectedIds, sensor.get('id'))) {
          return sensor;
        }
      });
    };

    return BrowserSensorView;

  })(window.sirius.BrowserView);

}).call(this);
