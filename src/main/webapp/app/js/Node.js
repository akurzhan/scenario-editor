// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.Node = (function(_super) {
    var $a;

    __extends(Node, _super);

    /* $a = alias for sirius namespace
    */


    function Node() {
      return Node.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    Node.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    Node.from_xml2 = function(xml, deferred, object_with_id) {
      var description, id, inputs, lock, name, obj, outputs, position, postmile, type;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.Node();
      description = xml.children('description');
      obj.set('description', $a.Description.from_xml2(description, deferred, object_with_id));
      postmile = xml.children('postmile');
      obj.set('postmile', $a.Postmile.from_xml2(postmile, deferred, object_with_id));
      outputs = xml.children('outputs');
      obj.set('outputs', $a.Outputs.from_xml2(outputs, deferred, object_with_id));
      inputs = xml.children('inputs');
      obj.set('inputs', $a.Inputs.from_xml2(inputs, deferred, object_with_id));
      position = xml.children('position');
      obj.set('position', $a.Position.from_xml2(position, deferred, object_with_id));
      name = $(xml).attr('name');
      obj.set('name', name);
      type = $(xml).attr('type');
      obj.set('type', type);
      id = $(xml).attr('id');
      obj.set('id', id);
      lock = $(xml).attr('lock');
      obj.set('lock', lock != null ? lock.toString().toLowerCase() === 'true' : void 0);
      if (object_with_id.node) {
        object_with_id.node[obj.id] = obj;
      }
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    Node.prototype.to_xml = function(doc) {
      var xml;
      xml = doc.createElement('node');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('description')) {
        xml.appendChild(this.get('description').to_xml(doc));
      }
      if (this.has('postmile')) {
        xml.appendChild(this.get('postmile').to_xml(doc));
      }
      if (this.has('outputs')) {
        xml.appendChild(this.get('outputs').to_xml(doc));
      }
      if (this.has('inputs')) {
        xml.appendChild(this.get('inputs').to_xml(doc));
      }
      if (this.has('position')) {
        xml.appendChild(this.get('position').to_xml(doc));
      }
      if (this.has('name')) {
        xml.setAttribute('name', this.get('name'));
      }
      if (this.has('type')) {
        xml.setAttribute('type', this.get('type'));
      }
      if (this.has('id')) {
        xml.setAttribute('id', this.get('id'));
      }
      if (this.has('lock') && this.lock !== false) {
        xml.setAttribute('lock', this.get('lock'));
      }
      return xml;
    };

    Node.prototype.deep_copy = function() {
      return Node.from_xml1(this.to_xml(), {});
    };

    Node.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    Node.prototype.make_tree = function() {
      return null;
    };

    return Node;

  })(Backbone.Model);

}).call(this);
