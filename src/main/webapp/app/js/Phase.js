// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.Phase = (function(_super) {
    var $a;

    __extends(Phase, _super);

    /* $a = alias for sirius namespace
    */


    function Phase() {
      return Phase.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    Phase.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    Phase.from_xml2 = function(xml, deferred, object_with_id) {
      var lag, links, min_green_time, nema, obj, permissive, protected_, recall, red_clear_time, yellow_time;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.Phase();
      links = xml.children('links');
      obj.set('links', $a.Links.from_xml2(links, deferred, object_with_id));
      nema = $(xml).attr('nema');
      obj.set('nema', Number(nema));
      protected_ = $(xml).attr('protected_');
      obj.set('protected_', protected_ != null ? protected_.toString().toLowerCase() === 'true' : void 0);
      permissive = $(xml).attr('permissive');
      obj.set('permissive', permissive != null ? permissive.toString().toLowerCase() === 'true' : void 0);
      yellow_time = $(xml).attr('yellow_time');
      obj.set('yellow_time', Number(yellow_time));
      red_clear_time = $(xml).attr('red_clear_time');
      obj.set('red_clear_time', Number(red_clear_time));
      min_green_time = $(xml).attr('min_green_time');
      obj.set('min_green_time', Number(min_green_time));
      lag = $(xml).attr('lag');
      obj.set('lag', lag != null ? lag.toString().toLowerCase() === 'true' : void 0);
      recall = $(xml).attr('recall');
      obj.set('recall', recall != null ? recall.toString().toLowerCase() === 'true' : void 0);
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    Phase.prototype.to_xml = function(doc) {
      var xml;
      xml = doc.createElement('phase');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('links')) {
        xml.appendChild(this.get('links').to_xml(doc));
      }
      if (this.has('nema')) {
        xml.setAttribute('nema', this.get('nema'));
      }
      if (this.has('protected_')) {
        xml.setAttribute('protected_', this.get('protected_'));
      }
      if (this.has('permissive')) {
        xml.setAttribute('permissive', this.get('permissive'));
      }
      if (this.has('yellow_time')) {
        xml.setAttribute('yellow_time', this.get('yellow_time'));
      }
      if (this.has('red_clear_time')) {
        xml.setAttribute('red_clear_time', this.get('red_clear_time'));
      }
      if (this.has('min_green_time')) {
        xml.setAttribute('min_green_time', this.get('min_green_time'));
      }
      if (this.has('lag')) {
        xml.setAttribute('lag', this.get('lag'));
      }
      if (this.has('recall')) {
        xml.setAttribute('recall', this.get('recall'));
      }
      return xml;
    };

    Phase.prototype.deep_copy = function() {
      return Phase.from_xml1(this.to_xml(), {});
    };

    Phase.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    Phase.prototype.make_tree = function() {
      return null;
    };

    return Phase;

  })(Backbone.Model);

}).call(this);
