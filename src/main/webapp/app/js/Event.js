// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.Event = (function(_super) {
    var $a;

    __extends(Event, _super);

    /* $a = alias for sirius namespace
    */


    function Event() {
      return Event.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    Event.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    Event.from_xml2 = function(xml, deferred, object_with_id) {
      var description, display_position, enabled, fundamentalDiagram, id, knob, lane_count_change, obj, on_off_switch, reset_to_nominal, splitratioEvent, targetElements, tstamp, type;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.Event();
      description = xml.children('description');
      obj.set('description', $a.Description.from_xml2(description, deferred, object_with_id));
      display_position = xml.children('display_position');
      obj.set('display_position', $a.Display_position.from_xml2(display_position, deferred, object_with_id));
      targetElements = xml.children('targetElements');
      obj.set('targetelements', $a.TargetElements.from_xml2(targetElements, deferred, object_with_id));
      fundamentalDiagram = xml.children('fundamentalDiagram');
      obj.set('fundamentaldiagram', $a.FundamentalDiagram.from_xml2(fundamentalDiagram, deferred, object_with_id));
      lane_count_change = xml.children('lane_count_change');
      obj.set('lane_count_change', $a.Lane_count_change.from_xml2(lane_count_change, deferred, object_with_id));
      on_off_switch = xml.children('on_off_switch');
      obj.set('on_off_switch', $a.On_off_switch.from_xml2(on_off_switch, deferred, object_with_id));
      knob = xml.children('knob');
      obj.set('knob', $a.Knob.from_xml2(knob, deferred, object_with_id));
      splitratioEvent = xml.children('splitratioEvent');
      obj.set('splitratioevent', $a.SplitratioEvent.from_xml2(splitratioEvent, deferred, object_with_id));
      id = $(xml).attr('id');
      obj.set('id', id);
      reset_to_nominal = $(xml).attr('reset_to_nominal');
      obj.set('reset_to_nominal', reset_to_nominal != null ? reset_to_nominal.toString().toLowerCase() === 'true' : void 0);
      tstamp = $(xml).attr('tstamp');
      obj.set('tstamp', Number(tstamp));
      enabled = $(xml).attr('enabled');
      obj.set('enabled', enabled != null ? enabled.toString().toLowerCase() === 'true' : void 0);
      type = $(xml).attr('type');
      obj.set('type', type);
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    Event.prototype.to_xml = function(doc) {
      var xml;
      xml = doc.createElement('event');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('description')) {
        xml.appendChild(this.get('description').to_xml(doc));
      }
      if (this.has('display_position')) {
        xml.appendChild(this.get('display_position').to_xml(doc));
      }
      if (this.has('targetelements')) {
        xml.appendChild(this.get('targetelements').to_xml(doc));
      }
      if (this.has('fundamentaldiagram')) {
        xml.appendChild(this.get('fundamentaldiagram').to_xml(doc));
      }
      if (this.has('lane_count_change')) {
        xml.appendChild(this.get('lane_count_change').to_xml(doc));
      }
      if (this.has('on_off_switch')) {
        xml.appendChild(this.get('on_off_switch').to_xml(doc));
      }
      if (this.has('knob')) {
        xml.appendChild(this.get('knob').to_xml(doc));
      }
      if (this.has('splitratioevent')) {
        xml.appendChild(this.get('splitratioevent').to_xml(doc));
      }
      if (this.has('id')) {
        xml.setAttribute('id', this.get('id'));
      }
      if (this.has('reset_to_nominal') && this.reset_to_nominal !== false) {
        xml.setAttribute('reset_to_nominal', this.get('reset_to_nominal'));
      }
      if (this.has('tstamp')) {
        xml.setAttribute('tstamp', this.get('tstamp'));
      }
      if (this.has('enabled')) {
        xml.setAttribute('enabled', this.get('enabled'));
      }
      if (this.has('type')) {
        xml.setAttribute('type', this.get('type'));
      }
      return xml;
    };

    Event.prototype.deep_copy = function() {
      return Event.from_xml1(this.to_xml(), {});
    };

    Event.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    Event.prototype.make_tree = function() {
      return null;
    };

    return Event;

  })(Backbone.Model);

}).call(this);
