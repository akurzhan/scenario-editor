// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.EditorSensorView = (function(_super) {
    var $a, URL_DESC;

    __extends(EditorSensorView, _super);

    function EditorSensorView() {
      return EditorSensorView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    URL_DESC = '* Note:<br/>Enter a full url or shorthand like:';

    URL_DESC += '<br/>pems: d4, July 20, 2012<br/>';

    URL_DESC += 'For ranges, use this date format:<br/>July 20-21, 2012';

    EditorSensorView.prototype.events = {
      'blur #sensor_type, #sensor_link_type': 'save',
      'blur #sensor_format, #sensor_url': 'saveDataSource',
      'blur #sensor_links': 'saveLinks',
      'blur #sensor_desc': 'saveDesc',
      'blur #sensor_hour, #sensor_minute, #sensor_second': 'saveTime',
      'blur #sensor_lat, #sensor_lng, #sensor_elevation': 'saveGeo',
      'click #display-at-pos': 'displayAtPos'
    };

    EditorSensorView.prototype.initialize = function(options) {
      options.templateData = this._getTemplateData(options.models);
      return EditorSensorView.__super__.initialize.call(this, options);
    };

    EditorSensorView.prototype.render = function() {
      EditorSensorView.__super__.render.call(this, this.elem);
      this._setSelectedType();
      this._checkDisableFields();
      return this;
    };

    EditorSensorView.prototype._checkDisableFields = function() {
      if (this.models.length > 1) {
        $('#sensor_lat').attr("disabled", true);
        $('#sensor_lng').attr("disabled", true);
        return $('#sensor_elevation').attr("disabled", true);
      }
    };

    EditorSensorView.prototype._setSelectedType = function() {
      var format, lType, type;
      format = this.models[0].get('data_sources').get('data_source')[0].get('format');
      type = this.models[0].get('type');
      lType = this.models[0].get('link_type');
      $("#sensor_type > option[value='" + type + "']").attr('selected', 'selected');
      $("#sensor_format > option[value='" + format + "']").attr('selected', 'selected');
      return $("#sensor_link_type > option[value='" + lType + "']").attr('selected', 'selected');
    };

    EditorSensorView.prototype._getTemplateData = function(models) {
      var dt;
      dt = models[0].get('data_sources').get('data_source')[0].get('dt');
      return {
        description: $a.Util.getDesc(models),
        lat: $a.Util.getGeometry({
          models: models,
          geom: 'lat'
        }),
        lng: $a.Util.getGeometry({
          models: models,
          geom: 'lng'
        }),
        elev: $a.Util.getGeometry({
          models: models,
          geom: 'elevation'
        }),
        url: _.map(models, function(m) {
          return m.get('data_sources').get('data_source')[0].get('url');
        }).join('; '),
        url_desc: URL_DESC,
        dt: $a.Util.convertSecondsToHoursMinSec(dt || 0),
        links: _.map(models, function(m) {
          return m.get('link_reference').get('id');
        }).join('; ')
      };
    };

    EditorSensorView.prototype.save = function(e) {
      var fieldId, id;
      id = e.currentTarget.id;
      fieldId = this._getFieldId(id);
      return _.each(this.models, function(m) {
        return m.set(fieldId, $("#" + id).val());
      });
    };

    EditorSensorView.prototype.saveDesc = function(e) {
      var id;
      id = e.currentTarget.id;
      return _.each(this.models, function(m) {
        return m.get('description').set('text', $("#" + id).val());
      });
    };

    EditorSensorView.prototype.saveLinks = function(e) {
      var id;
      id = e.currentTarget.id;
      return this.models[0].get('link_reference').set('id', $("#" + id).val());
    };

    EditorSensorView.prototype.saveDataSource = function(e) {
      var fieldId, id;
      id = e.currentTarget.id;
      fieldId = this._getFieldId(id);
      return _.each(this.models, function(m) {
        var p;
        p = m.get('data_sources').get('data_source')[0];
        return p != null ? p.set(fieldId, $("#" + id).val()) : void 0;
      });
    };

    EditorSensorView.prototype.saveTime = function(e) {
      var dt;
      dt = {
        'h': $("#sensor_hour").val(),
        'm': $("#sensor_minute").val(),
        's': $("#sensor_second").val()
      };
      return _.each(this.models, function(m) {
        var p;
        p = m.get('data_sources').get('data_source')[0];
        return p != null ? p.set('dt', $a.Util.convertToSeconds(dt)) : void 0;
      });
    };

    EditorSensorView.prototype.saveGeo = function(e) {
      var fieldId, id;
      id = e.currentTarget.id;
      fieldId = this._getFieldId(id);
      return this.models[0].get('position').get('point')[0].set(fieldId, $("#" + id).val());
    };

    EditorSensorView.prototype._getFieldId = function(id) {
      if (id.indexOf("sensor") === 0) {
        id = id.slice(7);
      }
      return id;
    };

    EditorSensorView.prototype.displayAtPos = function(e) {
      return e.preventDefault();
    };

    return EditorSensorView;

  })(window.sirius.EditorView);

}).call(this);
