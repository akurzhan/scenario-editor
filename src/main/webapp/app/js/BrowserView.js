// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.BrowserView = (function(_super) {
    var $a;

    __extends(BrowserView, _super);

    function BrowserView() {
      return BrowserView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    BrowserView.start = function(type) {
      switch (type) {
        case 'node':
          return new window.sirius.BrowserNodeView();
        case 'link':
          return new window.sirius.BrowserLinkView();
        case 'sensor':
          return new window.sirius.BrowserSensorView();
      }
    };

    BrowserView.prototype.initialize = function(options) {
      var title;
      this.options = options;
      this.elem = this.options.elem;
      title = $a.Util.toStandardCasing(this.elem);
      this.$el.attr('title', "" + title + " Browser");
      this.$el.attr('id', "browser");
      this.template = _.template($("#browser-window-template").html());
      this.$el.html(this.template());
      return this.render();
    };

    BrowserView.prototype.render = function() {
      var _this = this;
      this.$el.dialog({
        autoOpen: false,
        modal: false,
        open: function() {
          return $('.ui-state-default').blur();
        },
        close: function() {
          return _this.$el.remove();
        }
      });
      this.renderTable();
      this._firstRowSelected();
      this.renderEditor();
      this.$el.dialog('open');
      this.renderResizer();
      this.attachRowSelection();
      return this;
    };

    BrowserView.prototype.renderEditor = function(nev) {
      this.nev = nev;
      this.nev.render();
      $(this.nev.el).tabs();
      return $('#right').append(this.nev.el);
    };

    BrowserView.prototype.renderTable = function() {
      return this.dTable = $('#browser_table').dataTable({
        "aaData": this._getData(),
        "aoColumns": this._getColumns(),
        "aaSorting": [[0, "desc"]],
        "bPaginate": false,
        "bLengthChange": true,
        "bFilter": false,
        "bSort": true,
        "bInfo": false,
        "bAutoWidth": false,
        "bJQueryUI": true
      });
    };

    BrowserView.prototype._firstRowSelected = function() {
      var nTop;
      nTop = $('#browser_table tbody tr')[0];
      return $(nTop).addClass('row_selected');
    };

    BrowserView.prototype.renderResizer = function(e) {
      var prevPos,
        _this = this;
      prevPos = 0;
      this._setResizerHeight();
      return $('#resize').draggable({
        axis: 'x',
        start: function(e) {
          return prevPos = e.pageX;
        },
        drag: function(e) {
          var delta, divLeftWidth, divRightWidth, total;
          _this._setResizerHeight();
          total = $("#left").width() + $("#right").width();
          delta = prevPos - e.pageX;
          prevPos = e.pageX;
          divLeftWidth = $("#left").width() - delta;
          divRightWidth = $("#right").width() + delta;
          if (divLeftWidth < 150 || divRightWidth < 150) {
            divRightWidth = $("#right").width();
            divLeftWidth = $("#left").width();
          }
          $("#left").css('width', divLeftWidth / total * 100 + '%');
          $("#right").css('width', divRightWidth / total * 100 + '%');
          return $("#resize").css('position', '');
        }
      });
    };

    BrowserView.prototype._setResizerHeight = function() {
      var handleTop, height;
      height = $(this.nev.el).height();
      handleTop = height / 2 - 25;
      $("#handle").css('margin-top', "" + handleTop + "px");
      return $("#resize").css('height', "" + height + "px");
    };

    BrowserView.prototype.attachRowSelection = function() {
      var _this = this;
      return $('#browser_table tbody').click(function(event) {
        var selectedIds, selectedModels, tabSelected;
        $(event.target.parentNode).toggleClass('row_selected');
        selectedIds = [];
        $(_this.dTable.fnSettings().aoData).each(function(data) {
          if ($(this.nTr).hasClass('row_selected')) {
            return selectedIds.push(this._aData[0]);
          }
        });
        selectedModels = _this._getSelectedElems(selectedIds);
        tabSelected = $(_this.nev.el).tabs().tabs('option', 'selected');
        $('#right [id*="dialog-form"]').remove();
        if (!_.isEmpty(selectedIds)) {
          _this.renderEditor(selectedModels);
        }
        return $(_this.nev.el).tabs("select", tabSelected);
      });
    };

    BrowserView.prototype.rePopulateTable = function() {
      var rowIndex, self;
      this.data = this._getData();
      rowIndex = 0;
      self = this;
      return $(this.dTable.fnSettings().aoData).each(function(data) {
        if ($(this.nTr).hasClass('row_selected')) {
          self.dTable.fnUpdate(self.data[rowIndex], rowIndex);
        }
        return rowIndex++;
      });
    };

    return BrowserView;

  })(Backbone.View);

}).call(this);
