// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.TreeView = (function(_super) {
    var $a;

    __extends(TreeView, _super);

    function TreeView() {
      return TreeView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    TreeView.prototype.tagName = 'ol';

    TreeView.prototype.id = 'tree';

    TreeView.prototype.initialize = function(args) {
      var scenario;
      scenario = args.scenario;
      this.parent = args.attach;
      this._createParentNodes($a.main_tree_elements);
      this._createNetworkChildren({
        parentList: scenario.get('networklist'),
        modelListName: 'network',
        attachId: 'network-list',
        nameList: null
      });
      this._createChildren({
        parentList: scenario.get('networkconnections'),
        modelListName: 'network',
        attachId: 'network-connections',
        nameList: null
      });
      this._createLinkChildren({
        parentList: scenario.get('initialdensityset'),
        modelListName: 'density',
        attachId: 'initial-density-profiles'
      });
      this._createLinkChildren({
        parentList: scenario.get('controllerset'),
        modelListName: 'controller',
        attachId: 'controllers'
      });
      this._createLinkChildren({
        parentList: scenario.get('demandprofileset'),
        modelListName: 'demandprofile',
        attachId: 'demand-profiles'
      });
      this._createLinkChildren({
        parentList: scenario.get('eventset'),
        modelListName: 'event',
        attachId: 'events'
      });
      this._createLinkChildren({
        parentList: scenario.get('fundamentaldiagramprofileset'),
        modelListName: 'fundamentaldiagramprofile',
        attachId: 'fundamental-diagram-profiles'
      });
      this._createLinkChildren({
        parentList: scenario.get('oddemandprofileset'),
        modelListName: 'oddemandprofile',
        attachId: 'od-demand-profiles'
      });
      this._createLinkChildren({
        parentList: scenario.get('downstreamboundarycapacityprofileset'),
        modelListName: 'downstreamboundarycapacityprofile',
        attachId: 'downstream-boundary-profiles'
      });
      this._createNodeChildren({
        parentList: scenario.get('splitratioprofileset'),
        modelListName: 'splitratioprofile',
        attachId: 'split-ratio-profiles'
      });
      this._createLinkChildren({
        parentList: scenario.get('sensorlist'),
        modelListName: 'sensor',
        attachId: 'sensors'
      });
      this._createNodeChildren({
        parentList: scenario.get('signallist'),
        modelListName: 'signal',
        attachId: 'signals'
      });
      return $a.broker.on('app:main_tree', this.render, this);
    };

    TreeView.prototype.render = function() {
      $(this.parent).append(this.el);
      $a.broker.trigger('app:parent_tree');
      $a.broker.trigger('app:child_trees');
      return this;
    };

    TreeView.prototype._createParentNodes = function(list) {
      return _.each(list, function(e) {
        return new $a.TreeParentItemView(e);
      });
    };

    TreeView.prototype._createChildren = function(params, type) {
      var mList, pList;
      params.type = type;
      pList = params.parentList;
      mList = params.modelListName;
      if ((pList != null) && (pList.get(mList) != null) && pList.get(mList).length !== 0) {
        return this._createChildNodes(params);
      } else {
        return this._createEmptyChild(params.attachId);
      }
    };

    TreeView.prototype._createLinkChildren = function(params) {
      return this._createChildren(params, 'link');
    };

    TreeView.prototype._createNodeChildren = function(params) {
      return this._createChildren(params, 'node');
    };

    TreeView.prototype._createNetworkChildren = function(params) {
      return this._createChildren(params, 'network');
    };

    TreeView.prototype._createEmptyChild = function(attach) {
      return new $a.TreeChildItemView({
        e: null,
        targets: null,
        name: 'None Defined',
        attach: attach
      });
    };

    TreeView.prototype._createChildNodes = function(params, type) {
      var _this = this;
      return _.each(params.parentList.get(params.modelListName), function(e) {
        var attrs, name, targets;
        targets = _this._findTargetElements(e, params.attachId);
        name = targets[0].get('name');
        if (targets.length > 1) {
          name = "" + name + " -> " + (targets[1].get('name'));
        }
        attrs = {
          e: e,
          targets: targets,
          name: name,
          attach: params.attachId
        };
        switch (params.type) {
          case 'link':
            return new $a.TreeChildItemLinkView(attrs);
          case 'node':
            return new $a.TreeChildItemNodeView(attrs);
          case 'network':
            return new $a.TreeChildItemNetworkView(attrs);
          default:
            return new $a.TreeChildItemView(attrs);
        }
      });
    };

    TreeView.prototype._findTargetElements = function(element, type) {
      switch (type) {
        case 'network-list':
        case 'network-connections':
          return [element];
        case 'demand-profiles':
          return [element.get('link')];
        case 'od-demand-profiles':
          return [element.get('begin_node'), element.get('end_node')];
        case 'controllers':
        case 'events':
          return element.get('targetreferences');
        case 'fundamental-diagram-profiles' || 'downstream-boundary-profiles' || 'initial-density-profiles':
          return [element.get('link')];
        case 'split-ratio-profiles':
        case 'signals':
          return [element.get('node')];
        case 'sensors':
          return [element.get('link')];
      }
    };

    return TreeView;

  })(Backbone.View);

}).call(this);
