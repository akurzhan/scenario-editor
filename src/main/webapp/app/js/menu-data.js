// Generated by CoffeeScript 1.3.3
(function() {
  var $a, ETHAN_VIZ_MEASURE_URI, context_menu_item, noconfig;

  $a = window.sirius;

  $a.main_tree_elements = ['Initial Density Profiles', 'Network List', 'Controllers', 'Demand Profiles', 'Events', 'Fundamental Diagram Profiles', 'OD Demand Profiles', 'Network Connections', 'Downstream Boundary Profiles', 'Split Ratio Profiles', 'Sensors', 'Signals'];

  ETHAN_VIZ_MEASURE_URI = "http://via.path.berkeley.edu/~ethan/vis_chart.php";

  noconfig = function() {
    return alert('Not Configured');
  };

  $a.nav_bar_menu_items = {
    File: {
      New: noconfig,
      'Open Local Network': (function() {
        return $a.broker.trigger("app:open_scenario");
      }),
      'Save Local Network': (function() {
        return $a.broker.trigger("app:save_scenario");
      }),
      'Close Local Network': (function() {
        return $a.broker.trigger('map:clear_map');
      }),
      'Import Local Network': noconfig
    },
    Windows: {
      'Node Browser': (function() {
        return $a.BrowserView.start('node');
      }),
      'Link Browser': (function() {
        return $a.BrowserView.start('link');
      }),
      'Path Browser': noconfig,
      'Event Browser': noconfig,
      'Controller Browser': noconfig,
      'Sensor Browser': (function() {
        return $a.BrowserView.start('sensor');
      }),
      'Network Properties': noconfig
    },
    Tools: {
      'Import PeMS data': noconfig,
      Calibrate: noconfig,
      Simulate: noconfig,
      'Visualize Measurements': (function() {
        return window.open(ETHAN_VIZ_MEASURE_URI);
      })
    },
    Help: {
      About: noconfig,
      Help: noconfig,
      Version: noconfig,
      Identity: noconfig,
      Contact: noconfig,
      Legal: noconfig
    }
  };

  context_menu_item = function(label, event) {
    return {
      className: 'context_menu_item',
      label: label,
      event: event
    };
  };

  $a.main_context_menu = [
    {
      className: 'context_menu_item',
      event: (function() {
        return $a.map.setZoom($a.map.getZoom() + 1);
      }),
      label: 'Zoom in'
    }, {
      className: 'context_menu_item',
      event: (function() {
        return $a.map.setZoom($a.map.getZoom() - 1);
      }),
      label: 'Zoom out'
    }, {
      className: 'context_menu_separator'
    }, {
      className: 'context_menu_item',
      event: (function() {
        return $a.map.panTo($a.contextMenu.position);
      }),
      label: 'Center map here'
    }
  ];

  $a.link_context_menu = [
    {
      label: 'Select Link and its Nodes',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:select_neighbors:" + e.currentTarget.id);
      })
    }, {
      label: 'Clear Selection',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:clear_neighbors:" + e.currentTarget.id);
      })
    }
  ];

  $a.link_context_menu_demand_item = [
    {
      label: 'View Demands',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("link:view_demands:" + e.currentTarget.id);
      })
    }
  ];

  $a.sensor_context_menu = [
    {
      label: 'Select sensor link',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:select_neighbors:" + e.currentTarget.id);
      })
    }, {
      label: 'Clear Selection',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:clear_neighbors:" + e.currentTarget.id);
      })
    }
  ];

  $a.signal_context_menu = [
    {
      label: 'Select signal node',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:select_neighbors:" + e.currentTarget.id);
      })
    }, {
      label: 'Clear Selection',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:clear_neighbors:" + e.currentTarget.id);
      })
    }
  ];

  $a.node_context_menu = [
    {
      label: 'Select node and its links',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:select_neighbors:" + e.currentTarget.id);
      })
    }, {
      label: 'Select Outgoing links',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:select_neighbors_out:" + e.currentTarget.id);
      })
    }, {
      label: 'Select Incoming links',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:select_neighbors_in:" + e.currentTarget.id);
      })
    }, {
      label: 'Clear Selection',
      className: 'context_menu_item',
      event: (function(e) {
        return $a.broker.trigger("map:clear_neighbors:" + e.currentTarget.id);
      })
    }
  ];

  $a.layers_node_type_list = [
    {
      label: 'Freeway',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_freeway",
      triggerHide: "map:nodes:hide_freeway"
    }, {
      label: 'Highway',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_highway",
      triggerHide: "map:nodes:hide_higway"
    }, {
      label: 'Signalized Intersections',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_signalized_intersection",
      triggerHide: "map:nodes:hide_signalized_intersection"
    }, {
      label: 'Simple',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_simple",
      triggerHide: "map:nodes:hide_simple"
    }, {
      label: 'Stop Intersections',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_stop_intersection",
      triggerHide: "map:nodes:hide_stop_intersection"
    }, {
      label: 'Terminals',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_terminal",
      triggerHide: "map:nodes:hide_terminal"
    }, {
      label: 'Other',
      event: 'toggleVisible',
      triggerShow: "map:nodes:show_other",
      triggerHide: "map:nodes:hide_other"
    }
  ];

  $a.layers_link_type_list = [
    {
      label: 'Elec. toll coll. lanes',
      event: 'toggleVisible',
      triggerShow: "map:links:show_electric_toll",
      triggerHide: "map:links:hide_electric_toll"
    }, {
      label: 'Freeway mainlines',
      event: 'toggleVisible',
      triggerShow: "map:links:show_freeway",
      triggerHide: "map:links:hide_freeway"
    }, {
      label: 'Highway mainlines',
      event: 'toggleVisible',
      triggerShow: "map:links:show_highway",
      triggerHide: "map:links:hide_highway"
    }, {
      label: 'Heavy vehicle lanes',
      event: 'toggleVisible',
      triggerShow: "map:links:show_heavy_vehicle",
      triggerHide: "map:links:hide_heavy_vehicle"
    }, {
      label: 'HOV lanes',
      event: 'toggleVisible',
      triggerShow: "map:links:show_hov",
      triggerHide: "map:links:hide_hov"
    }, {
      label: 'HOT lanes',
      event: 'toggleVisible',
      triggerShow: "map:links:show_hot",
      triggerHide: "map:links:hide_hot"
    }, {
      label: 'Interconnects',
      event: 'toggleVisible',
      triggerShow: "map:links:show_freeway_connector",
      triggerHide: "map:links:hide_freeway_connector"
    }, {
      label: 'Intersection Approach',
      event: 'toggleVisible',
      triggerShow: "map:links:show_intersection_approach",
      triggerHide: "map:links:hide_intersection_approach"
    }, {
      label: 'On-ramps',
      event: 'toggleVisible',
      triggerShow: "map:links:show_onramp",
      triggerHide: "map:links:hide_onramp"
    }, {
      label: 'Off-ramps',
      event: 'toggleVisible',
      triggerShow: "map:links:show_offramp",
      triggerHide: "map:links:hide_offramp"
    }, {
      label: 'Streets',
      event: 'toggleVisible',
      triggerShow: "map:links:show_street",
      triggerHide: "map:links:hide_street"
    }
  ];

  $a.layers_menu = [
    {
      label: 'Show all nodes',
      event: (function(e) {
        return $a.broker.trigger('map:show_node_layer');
      })
    }, {
      label: 'Hide all nodes',
      event: (function(e) {
        return $a.broker.trigger('map:hide_node_layer');
      })
    }, {
      label: 'Nodes',
      className: 'dropdown submenu',
      link: 'nodeTypeList',
      href: '#nodeTypeList',
      items: $a.layers_node_type_list
    }, {
      className: 'divider'
    }, {
      label: 'Show all links',
      event: (function(e) {
        return $a.broker.trigger('map:show_link_layer');
      })
    }, {
      label: 'Hide all links',
      event: (function(e) {
        return $a.broker.trigger('map:hide_link_layer');
      })
    }, {
      label: 'Links',
      className: 'dropdown submenu',
      href: '#linkTypeList',
      link: 'linkTypeList',
      items: $a.layers_link_type_list
    }, {
      className: 'divider'
    }, {
      label: 'Events',
      event: 'toggleVisible',
      triggerShow: "map:show_event_layer",
      triggerHide: "map:hide_event_layer"
    }, {
      label: 'Controllers',
      event: 'toggleVisible',
      triggerShow: "map:show_controller_layer",
      triggerHide: "map:hide_controller_layer"
    }, {
      label: 'Sensors',
      event: 'toggleVisible',
      triggerShow: "map:show_sensor_layer",
      triggerHide: "map:hide_sensor_layer"
    }, {
      label: 'Demands',
      event: 'toggleVisible',
      triggerShow: "map:show_demand_layer",
      triggerHide: "map:hide_demand_layer"
    }
  ];

}).call(this);
