// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.sirius.MapLinkView = (function(_super) {
    var $a;

    __extends(MapLinkView, _super);

    function MapLinkView() {
      return MapLinkView.__super__.constructor.apply(this, arguments);
    }

    MapLinkView.LINK_COLOR = 'blue';

    MapLinkView.SELECTED_LINK_COLOR = 'red';

    $a = window.sirius;

    MapLinkView.prototype.initialize = function(model, network, legs) {
      var _this = this;
      this.model = model;
      this.network = network;
      this.legs = legs;
      this._createEncodedPath(this.legs);
      this._saveEncodedPath();
      this._drawLink();
      this._contextMenu();
      $a.broker.on('map:init', this.render, this);
      $a.broker.on('map:hide_link_layer', this.hideLink, this);
      $a.broker.on('map:show_link_layer', this.showLink, this);
      $a.broker.on("map:links:show_" + (this.model.get('type')), this.showLink, this);
      $a.broker.on("map:links:hide_" + (this.model.get('type')), this.hideLink, this);
      $a.broker.on("map:select_item:" + this.model.cid, this.linkSelect, this);
      $a.broker.on("map:clear_item:" + this.model.cid, this.clearSelected, this);
      $a.broker.on("map:select_neighbors:" + this.model.cid, this.selectSelfandMyNodes, this);
      $a.broker.on("map:clear_neighbors:" + this.model.cid, this.clearSelfandMyNodes, this);
      $a.broker.on('map:clear_selected', this.clearSelected, this);
      $a.broker.on("map:clear_map", this.removeLink, this);
      $a.broker.on("map:select_network:" + this.network.cid, this.linkSelect, this);
      $a.broker.on("map:clear_network:" + this.network.cid, this.clearSelected, this);
      $a.broker.on("link:view_demands:" + this.model.cid, this.viewDemands, this);
      google.maps.event.addListener(this.link, 'click', function(evt) {
        return _this.manageLinkSelect();
      });
      return google.maps.event.addListener(this.link, 'dblclick', function(evt) {
        return _this._editor(evt);
      });
    };

    MapLinkView.prototype.render = function() {
      this.link.setMap($a.map);
      return this;
    };

    MapLinkView.prototype._createEncodedPath = function(legs) {
      var leg, pt, smPath, step, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      smPath = [];
      for (_i = 0, _len = legs.length; _i < _len; _i++) {
        leg = legs[_i];
        _ref = leg.steps;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          step = _ref[_j];
          _ref1 = step.path;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            pt = _ref1[_k];
            if (!(__indexOf.call(smPath, pt) >= 0)) {
              smPath.push(pt);
            }
          }
        }
      }
      return this.encodedPath = google.maps.geometry.encoding.encodePath(smPath);
    };

    MapLinkView.prototype._saveEncodedPath = function() {
      var ep, lg, pts;
      lg = new $a.LinkGeometry();
      ep = new $a.EncodedPolyline();
      pts = new $a.Points();
      pts.set({
        text: this.encodedPath
      });
      ep.set({
        points: pts
      });
      lg.set({
        encodedpolyline: ep
      });
      return this.model.set({
        linkgeometry: lg
      });
    };

    MapLinkView.prototype._drawLink = function() {
      var linkGeom, polyPath;
      linkGeom = this.model.get('linkgeometry');
      polyPath = linkGeom.get('encodedpolyline').get('points').get('text');
      return this.link = new google.maps.Polyline({
        path: google.maps.geometry.encoding.decodePath(polyPath),
        map: $a.map,
        strokeColor: MapLinkView.LINK_COLOR,
        icons: [
          {
            icon: {
              path: google.maps.SymbolPath.FORWARD_OPEN_ARROW
            },
            fillColor: 'blue',
            offset: '50%'
          }
        ],
        strokeOpacity: 0.6,
        strokeWeight: 4
      });
    };

    MapLinkView.prototype._contextMenu = function() {
      var contextMenu, contextMenuOptions, menuItems,
        _this = this;
      contextMenuOptions = {};
      menuItems = $a.Util.copy($a.link_context_menu);
      if (this.model.get('demand') != null) {
        menuItems.push($a.Util.copy($a.link_context_menu_demand_item)[0]);
      }
      contextMenuOptions.menuItems = menuItems;
      _.each(contextMenuOptions.menuItems, function(item) {
        return item.id = "" + _this.model.cid;
      });
      contextMenuOptions["class"] = 'context_menu';
      contextMenuOptions.id = "context-menu-link-" + this.model.cid;
      contextMenu = new $a.ContextMenuView(contextMenuOptions);
      google.maps.event.addListener(this.link, 'rightclick', function(mouseEvent) {
        return contextMenu.show(mouseEvent.latLng);
      });
      return this.model.set('contextMenu', contextMenu);
    };

    MapLinkView.prototype._editor = function(evt) {
      var env;
      env = new $a.EditorLinkView({
        elem: 'link',
        models: [this.model],
        width: 375
      });
      $('body').append(env.el);
      env.render();
      $(env.el).tabs();
      $(env.el).dialog('open');
      return evt.stop();
    };

    MapLinkView.prototype.viewDemands = function() {
      var dv;
      dv = new $a.DemandVisualizer(this.model.get('demand'));
      $('body').append(dv.el);
      dv.render();
      return $(dv.el).dialog('open');
    };

    MapLinkView.prototype.hideLink = function() {
      return this.link.setMap(null);
    };

    MapLinkView.prototype.showLink = function() {
      return this.link.setMap($a.map);
    };

    MapLinkView.prototype.removeLink = function() {
      $a.broker.off('map:init');
      $a.broker.off('map:hide_link_layer');
      $a.broker.off('map:show_link_layer');
      $a.broker.off("map:links:show_" + (this.model.get('type')));
      $a.broker.off("map:links:hide_" + (this.model.get('type')));
      $a.broker.off("map:select_item:" + this.model.cid);
      $a.broker.off("map:clear_item:" + this.model.cid);
      $a.broker.off("map:select_neighbors:" + this.model.cid);
      $a.broker.off("map:clear_neighbors:" + this.model.cid);
      $a.broker.off("map:select_network:" + this.network.cid);
      $a.broker.off("map:clear_network:" + this.network.cid);
      if (this.link) {
        this.hideLink();
      }
      return this.link = null;
    };

    MapLinkView.prototype.manageLinkSelect = function() {
      if (this.link.get('strokeColor') === MapLinkView.LINK_COLOR) {
        this._triggerClearSelectEvents();
        $a.broker.trigger("app:tree_highlight:" + this.model.cid);
        return this.linkSelect();
      } else {
        this._triggerClearSelectEvents();
        return this.clearSelected();
      }
    };

    MapLinkView.prototype._triggerClearSelectEvents = function() {
      if (!$a.SHIFT_DOWN) {
        $a.broker.trigger('map:clear_selected');
      }
      if (!$a.SHIFT_DOWN) {
        return $a.broker.trigger('app:tree_remove_highlight');
      }
    };

    MapLinkView.prototype.linkSelect = function() {
      return this.link.setOptions({
        options: {
          strokeColor: MapLinkView.SELECTED_LINK_COLOR
        }
      });
    };

    MapLinkView.prototype.clearSelected = function() {
      return this.link.setOptions({
        options: {
          strokeColor: MapLinkView.LINK_COLOR
        }
      });
    };

    MapLinkView.prototype.selectSelfandMyNodes = function() {
      var beginNode, endNode;
      this._triggerClearSelectEvents();
      this.linkSelect();
      beginNode = this.model.get("begin").get("node");
      endNode = this.model.get("end").get("node");
      $a.broker.trigger("app:tree_highlight:" + this.model.cid);
      $a.broker.trigger("app:tree_highlight:" + beginNode.cid);
      $a.broker.trigger("app:tree_highlight:" + endNode.cid);
      $a.broker.trigger("map:select_item:" + beginNode.cid);
      return $a.broker.trigger("map:select_item:" + endNode.cid);
    };

    MapLinkView.prototype.clearSelfandMyNodes = function() {
      var beginNode, endNode;
      this.clearSelected();
      beginNode = this.model.get("begin").get("node");
      endNode = this.model.get("end").get("node");
      $a.broker.trigger("map:clear_item:" + beginNode.cid);
      $a.broker.trigger("map:clear_item:" + endNode.cid);
      $a.broker.trigger("app:tree_remove_highlight:" + this.model.cid);
      $a.broker.trigger("app:tree_remove_highlight:" + beginNode.cid);
      return $a.broker.trigger("app:tree_remove_highlight:" + endNode.cid);
    };

    return MapLinkView;

  })(Backbone.View);

}).call(this);
