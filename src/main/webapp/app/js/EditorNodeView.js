// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.EditorNodeView = (function(_super) {
    var $a;

    __extends(EditorNodeView, _super);

    function EditorNodeView() {
      return EditorNodeView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    EditorNodeView.prototype.events = {
      'blur #name, #type': 'save',
      'blur #description': 'saveDesc',
      'blur #lat, #lng, #elevation': 'saveGeo',
      'click #lock': 'saveLocked',
      'click #edit-signal': 'signalEditor',
      'click #choose-name': 'chooseName',
      'click #remove-join-links': 'removeJoinLinks'
    };

    EditorNodeView.prototype.initialize = function(options) {
      options.templateData = this._getTemplateData(options.models);
      return EditorNodeView.__super__.initialize.call(this, options);
    };

    EditorNodeView.prototype.render = function() {
      EditorNodeView.__super__.render.call(this, this.elem);
      this._setSelectedType();
      this._checkDisableTabs();
      this._checkDisableFields();
      return this;
    };

    EditorNodeView.prototype._checkDisableTabs = function() {
      var disable;
      $('#edit-signal').attr("disabled", true);
      $('#edit-signal').addClass('ui-state-disabled');
      disable = [2];
      return this.$el.tabs({
        disabled: disable
      });
    };

    EditorNodeView.prototype._checkDisableFields = function() {
      if (this.models.length > 1) {
        $('#name').attr("disabled", true);
        $('#lat').attr("disabled", true);
        $('#lng').attr("disabled", true);
        return $('#elevation').attr("disabled", true);
      }
    };

    EditorNodeView.prototype._setSelectedType = function() {
      var type;
      type = this.models[0].get('type');
      return $(this.$el[0]).find("select option[value='" + type + "']").attr('selected', 'selected');
    };

    EditorNodeView.prototype._getTemplateData = function(models) {
      return {
        name: _.map(models, function(m) {
          return m.get('name');
        }).join(", "),
        description: $a.Util.getDesc(models),
        lat: $a.Util.getGeometry({
          models: models,
          geom: 'lat'
        }),
        lng: $a.Util.getGeometry({
          models: models,
          geom: 'lng'
        }),
        elevation: $a.Util.getGeometry({
          models: models,
          geom: 'elevation'
        }),
        lock: models[0].has('lock') && models[0].get('lock') ? 'checked' : ''
      };
    };

    EditorNodeView.prototype.save = function(e) {
      var id;
      id = e.currentTarget.id;
      return _.each(this.models, function(m) {
        return m.set(id, $("#" + id).val());
      });
    };

    EditorNodeView.prototype.saveDesc = function(e) {
      var id;
      id = e.currentTarget.id;
      return $a.Util.saveDesc({
        models: this.models,
        id: id
      });
    };

    EditorNodeView.prototype.saveGeo = function(e) {
      var id;
      id = e.currentTarget.id;
      return this.models[0].get('position').get('point')[0].set(id, $("#" + id).val());
    };

    EditorNodeView.prototype.saveLocked = function(e) {
      var id;
      id = e.currentTarget.id;
      return _.each(this.models, function(m) {
        return m.set(id, $("#" + id).prop('checked'));
      });
    };

    EditorNodeView.prototype.signalEditor = function(e) {
      return e.preventDefault();
    };

    EditorNodeView.prototype.chooseName = function(e) {
      return e.preventDefault();
    };

    EditorNodeView.prototype.removeJoinLinks = function(e) {
      return e.preventDefault();
    };

    return EditorNodeView;

  })(window.sirius.EditorView);

}).call(this);
