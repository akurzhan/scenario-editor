// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.AppView = (function(_super) {
    var $a, $evt;

    __extends(AppView, _super);

    function AppView() {
      this.toggleTree = __bind(this.toggleTree, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    $evt = google.maps.event;

    AppView.prototype.initialize = function() {
      _.templateSettings = {
        evaluate: /{%([\s\S]+?)%}/g,
        interpolate: /\{\{(.+?)\}\}/g
      };
      $a.broker = _.clone(Backbone.Events);
      return this.render();
    };

    AppView.prototype.render = function() {
      var _this = this;
      this._initializeMap();
      this._navBar();
      this._contextMenu();
      this._layersMenu();
      this._messagePanel();
      this._treeMenuToggle();
      this._attachEvents();
      $evt.addDomListener(window, 'keydown', function(event) {
        return _this._setKeyDownEvents(event);
      });
      $evt.addDomListener(window, 'keyup', function(event) {
        return _this._setKeyUpEvents(event);
      });
      $evt.addListener($a.map, 'mouseover', function(mouseEvent) {
        return _this.fadeIn();
      });
      $a.broker.on('map:upload_complete', this._displayMap, this);
      $a.broker.on("map:clear_map", this.clearMap, this);
      $a.broker.on('app:open_scenario', this.openScenario, this);
      $a.broker.on("app:save_scenario", this.saveScenario, this);
      $a.broker.on("map:alert", this.showAlert, this);
      $a.broker.on("map:toggle_tree", this.toggleTree, this);
      return this;
    };

    AppView.prototype._initializeMap = function() {
      var mapOpts;
      mapOpts = {
        center: new google.maps.LatLng(37.85794730789898, -122.29954719543457),
        zoom: 14,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        mapTypeControl: false,
        zoomControl: true,
        zoomControlOptions: {
          style: google.maps.ZoomControlStyle.DEFAULT,
          position: google.maps.ControlPosition.TOP_LEFT
        }
      };
      return $a.map = new google.maps.Map($("#map_canvas")[0], mapOpts);
    };

    AppView.prototype._contextMenu = function() {
      var contextMenuOptions;
      contextMenuOptions = {};
      contextMenuOptions.menuItems = $a.main_context_menu;
      contextMenuOptions.id = 'main-context-menu';
      contextMenuOptions["class"] = 'context_menu';
      $a.contextMenu = new $a.ContextMenuView(contextMenuOptions);
      return $evt.addListener($a.map, 'rightclick', function(mouseEvent) {
        return $a.contextMenu.show(mouseEvent.latLng);
      });
    };

    AppView.prototype._navBar = function() {
      var attrs;
      attrs = {
        name: 'localNetwork',
        id: 'uploadField',
        attach: '#main-nav div'
      };
      new $a.FileUploadView(attrs);
      attrs = {
        menuItems: $a.nav_bar_menu_items,
        attach: '#main-nav div'
      };
      return new $a.NavBarView(attrs);
    };

    AppView.prototype._layersMenu = function() {
      var attrs, lmenu;
      attrs = {
        className: 'dropdown-menu bottom-up',
        id: 'l_list',
        parentId: 'lh',
        menuItems: $a.layers_menu
      };
      return lmenu = new $a.LayersMenuView(attrs);
    };

    AppView.prototype.saveScenario = function() {
      var attrs, doc;
      if ($a.models != null) {
        doc = document.implementation.createDocument(null, null, null);
        attrs = {
          xml: $a.models.to_xml(doc),
          serverWrite: "../scenario.php",
          serverDownload: "../scenario-download.php"
        };
        return $a.Util.writeAndDownloadXML(attrs);
      } else {
        return $a.broker.trigger("app:show_message:info", "No scenario loaded");
      }
    };

    AppView.prototype.openScenario = function() {
      return $("#uploadField").click();
    };

    AppView.prototype._displayMap = function(fileText) {
      var xml;
      try {
        xml = $.parseXML(fileText);
      } catch (error) {
        $a.broker.trigger("app:show_message:error", error);
      }
      $a.models = $a.Scenario.from_xml($(xml).children());
      return this.mapView = new $a.MapNetworkView($a.models);
    };

    AppView.prototype.clearMap = function() {
      $a.broker.trigger('map:toggle_tree', false);
      $a.broker.trigger('app:tree_clear');
      return $a.broker.trigger('app:show_message:success', 'Cleared map');
    };

    AppView.prototype._messagePanel = function() {
      return new $a.MessagePanelView();
    };

    AppView.prototype._setKeyDownEvents = function(e) {
      if ($a.ALT_DOWN && e.keyCode === 65) {
        $("#uploadField").click();
        $a.ALT_DOWN = false;
      }
      if ($a.ALT_DOWN && e.keyCode === 83) {
        $("#save-local-network").click();
        $a.ALT_DOWN = false;
      }
      if (e.keyCode === 16) {
        $a.SHIFT_DOWN = true;
      }
      if (e.keyCode === 18) {
        return $a.ALT_DOWN = true;
      }
    };

    AppView.prototype._setKeyUpEvents = function(e) {
      if (e.keyCode === 16) {
        $a.SHIFT_DOWN = false;
      }
      if (e.keyCode === 18) {
        return $a.ALT_DOWN = false;
      }
    };

    AppView.prototype.fadeIn = function() {
      $('.container').fadeIn(200);
      $('#lh').fadeIn(200);
      return $('#mh').fadeIn(200);
    };

    AppView.prototype._treeMenuToggle = function() {
      var toggleTree;
      toggleTree = document.createElement("button");
      toggleTree.innerHTML = " < ";
      toggleTree.id = "collapseTree";
      document.getElementById("map_canvas").appendChild(toggleTree);
      return toggleTree.onclick = function() {
        return $a.broker.trigger('map:toggle_tree', 0);
      };
    };

    AppView.prototype._attachEvents = function() {
      return $('#expand-all').click(function() {
        var all_checks, btn, checkBox, _i, _j, _len, _len1;
        all_checks = $('.expand-tree');
        btn = document.getElementById('expand-all');
        if (btn.innerHTML === '+' && all_checks.length > 0) {
          for (_i = 0, _len = all_checks.length; _i < _len; _i++) {
            checkBox = all_checks[_i];
            checkBox.checked = true;
          }
          return btn.innerHTML = '-';
        } else if (btn.innerHTML === '-' && all_checks.length > 0) {
          for (_j = 0, _len1 = all_checks.length; _j < _len1; _j++) {
            checkBox = all_checks[_j];
            checkBox.checked = false;
          }
          return btn.innerHTML = '+';
        }
      });
    };

    AppView.prototype.toggleTree = function(display) {
      var align, button;
      button = document.getElementById('collapseTree');
      if (button.innerHTML === ' &gt; ' && (display === 0 || display === false)) {
        button.innerHTML = ' < ';
        $('#right_tree').hide(200);
        align = {
          right: '0%'
        };
        return $('#collapseTree').animate(align, 200);
      } else if (button.innerHTML === ' &lt; ' && (display === 0 || display === true)) {
        button.innerHTML = ' > ';
        $('#right_tree').show(200);
        align = {
          right: '22%'
        };
        return $('#collapseTree').animate(align, 200);
      }
    };

    return AppView;

  })(Backbone.View);

}).call(this);
