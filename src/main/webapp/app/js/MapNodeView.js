// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.MapNodeView = (function(_super) {
    var $a;

    __extends(MapNodeView, _super);

    function MapNodeView() {
      return MapNodeView.__super__.constructor.apply(this, arguments);
    }

    MapNodeView.ICON = 'dot';

    MapNodeView.SELECTED_ICON = 'reddot';

    MapNodeView.TERMINAL_ICON = 'square';

    MapNodeView.SELECTED_TERMINAL_ICON = 'red-square';

    MapNodeView.TERMINAL_TYPE = 'terminal';

    $a = window.sirius;

    MapNodeView.prototype.initialize = function(model, network) {
      this.network = network;
      MapNodeView.__super__.initialize.call(this, model);
      this.model.on('change:selected', this.toggleSelected, this);
      this._contextMenu();
      $a.broker.on("map:select_neighbors:" + this.model.cid, this.selectSelfandMyLinks, this);
      $a.broker.on("map:select_neighbors_out:" + this.model.cid, this.selectMyOutLinks, this);
      $a.broker.on("map:select_neighbors_in:" + this.model.cid, this.selectMyInLinks, this);
      $a.broker.on("map:clear_neighbors:" + this.model.cid, this.clearSelfandMyLinks, this);
      $a.broker.on('map:show_node_layer', this.showMarker, this);
      $a.broker.on('map:hide_node_layer', this.hideMarker, this);
      $a.broker.on("map:nodes:show_" + (this.model.get('type')), this.showMarker, this);
      $a.broker.on("map:nodes:hide_" + (this.model.get('type')), this.hideMarker, this);
      $a.broker.on("map:select_network:" + this.network.cid, this.makeSelected, this);
      return $a.broker.on("map:clear_network:" + this.network.cid, this.clearSelected, this);
    };

    MapNodeView.prototype.getIcon = function() {
      return MapNodeView.__super__.getIcon.call(this, this._getTypeIcon(false));
    };

    MapNodeView.prototype._contextMenu = function() {
      return MapNodeView.__super__._contextMenu.call(this, 'node', $a.node_context_menu);
    };

    MapNodeView.prototype._editor = function() {
      var env;
      env = new $a.EditorNodeView({
        elem: 'node',
        models: [this.model],
        width: 300
      });
      $('body').append(env.el);
      env.render();
      $(env.el).tabs();
      return $(env.el).dialog('open');
    };

    MapNodeView.prototype.removeElement = function() {
      $a.broker.off("map:select_neighbors:" + this.model.cid);
      $a.broker.off("map:select_neighbors_out:" + this.model.cid);
      $a.broker.off("map:select_neighbors_in:" + this.model.cid);
      $a.broker.off("map:clear_neighbors:" + this.model.cid);
      $a.broker.off('map:show_node_layer');
      $a.broker.off('map:hide_node_layer');
      $a.broker.off("map:nodes:show_" + (this.model.get('type')));
      $a.broker.off("map:nodes:hide_" + (this.model.get('type')));
      $a.broker.off("map:select_network:" + this.network.cid);
      $a.broker.off("map:clear_network:" + this.network.cid);
      return MapNodeView.__super__.removeElement.apply(this, arguments);
    };

    MapNodeView.prototype.manageMarkerSelect = function() {
      var iconName;
      iconName = MapNodeView.__super__._getIconName.apply(this, []);
      if (iconName === ("" + (this._getTypeIcon(false)) + ".png")) {
        this._triggerClearSelectEvents();
        $a.broker.trigger("app:tree_highlight:" + this.model.cid);
        return this.makeSelected();
      } else {
        this._triggerClearSelectEvents();
        return this.clearSelected();
      }
    };

    MapNodeView.prototype._triggerClearSelectEvents = function() {
      if (!$a.SHIFT_DOWN) {
        $a.broker.trigger('map:clear_selected');
      }
      if (!$a.SHIFT_DOWN) {
        return $a.broker.trigger('app:tree_remove_highlight');
      }
    };

    MapNodeView.prototype.selectSelfandMyLinks = function() {
      this._triggerClearSelectEvents();
      this.makeSelected();
      return _.each(this.model.ios(), this.selectLink);
    };

    MapNodeView.prototype.clearSelfandMyLinks = function() {
      this.clearSelected();
      $a.broker.trigger("app:tree_remove_highlight:" + this.model.cid);
      return _.each(this.model.ios(), function(link) {
        $a.broker.trigger("map:clear_item:" + (link.get('link').cid));
        return $a.broker.trigger("app:tree_remove_highlight:" + (link.get('link').cid));
      });
    };

    MapNodeView.prototype.selectMyOutLinks = function() {
      this._triggerClearSelectEvents();
      return _.each(this.model.outputs(), this.selectLink);
    };

    MapNodeView.prototype.selectMyInLinks = function() {
      this._triggerClearSelectEvents();
      return _.each(this.model.inputs(), this.selectLink);
    };

    MapNodeView.prototype.selectLink = function(io) {
      $a.broker.trigger("map:select_item:" + (io.get('link').cid));
      $a.broker.trigger("app:tree_highlight:" + (io.get('link').cid));
      return $a.broker.trigger("app:tree_show_item:" + (io.get('link').cid));
    };

    MapNodeView.prototype.toggleSelected = function() {
      console.log(this.model);
      if (this.model.get('selected') === true) {
        return this.makeSelected();
      } else {
        return this.clearSelected();
      }
    };

    MapNodeView.prototype.makeSelected = function() {
      return MapNodeView.__super__.makeSelected.call(this, this._getTypeIcon(true));
    };

    MapNodeView.prototype.clearSelected = function() {
      return MapNodeView.__super__.clearSelected.call(this, this._getTypeIcon(false));
    };

    MapNodeView.prototype._getTypeIcon = function(selected) {
      switch (this.model.get('type')) {
        case MapNodeView.TERMINAL_TYPE:
          if (selected) {
            return MapNodeView.SELECTED_TERMINAL_ICON;
          } else {
            return MapNodeView.TERMINAL_ICON;
          }
          break;
        default:
          if (selected) {
            return MapNodeView.SELECTED_ICON;
          } else {
            return MapNodeView.ICON;
          }
      }
    };

    return MapNodeView;

  })(window.sirius.MapMarkerView);

}).call(this);
