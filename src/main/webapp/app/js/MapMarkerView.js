// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.MapMarkerView = (function(_super) {
    var $a;

    __extends(MapMarkerView, _super);

    function MapMarkerView() {
      return MapMarkerView.__super__.constructor.apply(this, arguments);
    }

    MapMarkerView.IMAGE_PATH = '../lib/data/img/';

    $a = window.sirius;

    MapMarkerView.prototype.initialize = function(model) {
      var gevent,
        _this = this;
      this.model = model;
      this.latLng = $a.Util.getLatLng(model);
      this.draw();
      gevent = google.maps.event;
      gevent.addListener(this.marker, 'dragend', this.dragMarker());
      gevent.addListener(this.marker, 'click', function(event) {
        return _this.manageMarkerSelect();
      });
      gevent.addListener(this.marker, 'dblclick', function(mouseEvent) {
        return _this._editor();
      });
      $a.broker.on('map:clear_selected', this.clearSelected, this);
      $a.broker.on("map:select_item:" + this.model.cid, this.makeSelected, this);
      $a.broker.on("map:clear_item:" + this.model.cid, this.clearSelected, this);
      $a.broker.on('map:init', this.render, this);
      return $a.broker.on('map:clear_map', this.removeElement, this);
    };

    MapMarkerView.prototype.render = function() {
      this.marker.setMap($a.map);
      return this;
    };

    MapMarkerView.prototype.draw = function() {
      return this.marker = new google.maps.Marker({
        map: null,
        position: this.latLng,
        draggable: true,
        icon: this.getIcon(),
        title: this._getTitle()
      });
    };

    MapMarkerView.prototype._getTitle = function() {
      var title;
      title = "Name: " + (this.model.get('name')) + "\n";
      title += "Latitude: " + (this.latLng.lat()) + "\n";
      title += "Longitude: " + (this.latLng.lng());
      return title;
    };

    MapMarkerView.prototype.getIcon = function(img) {
      return this.getMarkerImage(img);
    };

    MapMarkerView.prototype.getMarkerImage = function(img) {
      return new google.maps.MarkerImage("" + MapMarkerView.IMAGE_PATH + img + ".png", new google.maps.Size(32, 32), new google.maps.Point(0, 0), new google.maps.Point(16, 16));
    };

    MapMarkerView.prototype.removeElement = function() {
      $a.broker.off('map:init');
      $a.broker.off('map:clear_selected');
      $a.broker.off("map:select_item:" + this.model.cid);
      $a.broker.off("map:clear_item:" + this.model.cid);
      if (this.marker != null) {
        this.hideMarker();
      }
      return this.marker = null;
    };

    MapMarkerView.prototype._contextMenu = function(type, menuItems) {
      var _this = this;
      this.contextMenuOptions = {
        "class": 'context_menu',
        id: "context-menu-" + type + "-" + this.model.id,
        menuItems: $a.Util.copy(menuItems)
      };
      _.each(this.contextMenuOptions.menuItems, function(item) {
        return item.id = "" + _this.model.cid;
      });
      this.contextMenu = new $a.ContextMenuView(this.contextMenuOptions);
      google.maps.event.addListener(this.marker, 'rightclick', function(mouseEvent) {
        return _this.contextMenu.show(mouseEvent.latLng);
      });
      return this.model.set('contextMenu', this.contextMenu);
    };

    MapMarkerView.prototype.dragMarker = function() {
      this.latLng = this.marker.getPosition();
      return $a.map.panTo(this.latLng);
    };

    MapMarkerView.prototype.hideMarker = function() {
      return this.marker.setMap(null);
    };

    MapMarkerView.prototype.showMarker = function() {
      return this.marker.setMap($a.map);
    };

    MapMarkerView.prototype._getIconName = function() {
      var lastIndex, tokens;
      tokens = this.marker.get('icon').url.split('/');
      lastIndex = tokens.length - 1;
      return tokens[lastIndex];
    };

    MapMarkerView.prototype._setSelected = function(img) {
      return this.marker.setIcon(this.getMarkerImage(img));
    };

    MapMarkerView.prototype.makeSelected = function(img) {
      return this._setSelected(img);
    };

    MapMarkerView.prototype.clearSelected = function(img) {
      return this._setSelected(img);
    };

    return MapMarkerView;

  })(Backbone.View);

}).call(this);
