// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.EditorLinkView = (function(_super) {
    var $a;

    __extends(EditorLinkView, _super);

    function EditorLinkView() {
      return EditorLinkView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    EditorLinkView.prototype.events = {
      'blur #link_name, #road_name, #link_type': 'save',
      'blur #lanes, #lane_offset, #length': 'save',
      'blur #capacity,\
      #critical_speed, \
      #capacity_drop,\
      #jam_density,\
      #free_flow_speed,\
      #congestion_speed,\
      #std_dev_capacity,\
      #std_dev_congestion,\
      #std_dev_free_flow_speed': 'saveFD',
      'blur #knob, #dp_text': 'saveDP',
      'blur #link_demand_start_hour, \
      #link_demand_start_minute, \
      #link_demand_start_second,\
      #link_demand_sample_hour, \
      #link_demand_sample_minute, \
      #link_demand_sample_second': 'saveDPTime',
      'blur #cp_text': 'saveCP',
      'blur #link_capacity_start_hour, \
      #link_capacity_start_minute, \
      #link_capacity_start_second,\
      #link_capacity_sample_hour, \
      #link_capacity_sample_minute, \
      #link_capacity_sample_second': 'saveCPTime',
      'blur #description': 'saveDesc',
      'click #do-subdivide': 'subDivide',
      'click #do-split': 'doSplit',
      'click #add-lt': 'addLeftTurn',
      'click #add-rt': 'addRightTurn',
      'click #choose-name': 'chooseName',
      'click #reverse-link': 'reverseLink',
      'click #geom-line': 'geomLine',
      'click #geom-road': 'geomRoad'
    };

    EditorLinkView.prototype.initialize = function(options) {
      options.templateData = this._getTemplateData(options.models);
      return EditorLinkView.__super__.initialize.call(this, options);
    };

    EditorLinkView.prototype.render = function() {
      EditorLinkView.__super__.render.call(this, this.elem);
      this._checkDisableTabs();
      this._checkDisableFields();
      this._setSelectedType();
      return this;
    };

    EditorLinkView.prototype._setSelectedType = function() {
      var type;
      type = this.models[0].get('type');
      return $(this.$el[0]).find("select option[value='" + type + "']").attr('selected', 'selected');
    };

    EditorLinkView.prototype._checkDisableTabs = function() {
      var disable;
      disable = [];
      if (!(this.models[0].get('fundamentaldiagramprofile') != null)) {
        disable.push(2);
      }
      if (!(this.models[0].get('demand') != null) || this.models.length > 1) {
        disable.push(3);
      }
      if (!(this.models[0].get('capacityprofile') != null) || this.models.length > 1) {
        disable.push(4);
      }
      disable.push(5);
      return this.$el.tabs({
        disabled: disable
      });
    };

    EditorLinkView.prototype._checkDisableFields = function() {
      if (this.models.length > 1) {
        $('#link_name').attr("disabled", true);
        return $('#length').attr("disabled", true);
      }
    };

    EditorLinkView.prototype._getTemplateData = function(models) {
      var cp, dp, fds;
      if (models.length === 1) {
        cp = models[0].get('capacity') || null;
      }
      if (models.length === 1) {
        dp = models[0].get('demand') || null;
      }
      fds = _.map(models, function(m) {
        var fdp;
        fdp = m.get('fundamentaldiagramprofile');
        return (fdp != null ? fdp.get('fundamentaldiagram')[0] : void 0) || null;
      });
      return {
        name: _.map(models, function(m) {
          return m.get('name');
        }).join(", "),
        description: _.map(models, function(m) {
          return m.get('description').get('text');
        }).join("; "),
        roadName: _.map(models, function(m) {
          return m.get('road_name');
        }).join(", "),
        lanes: _.map(models, function(m) {
          return m.get('lanes');
        }).join(", "),
        laneOffset: _.map(models, function(m) {
          return m.get('lane_offset');
        }).join(", "),
        length: _.map(models, function(m) {
          return m.get('length');
        }).join(", "),
        freeFlowSpeed: _.map(fds, function(fd) {
          return (fd != null ? fd.get('free_flow_speed') : void 0) || '';
        }).join(", "),
        capacity: _.map(fds, function(fd) {
          return (fd != null ? fd.get('capacity') : void 0) || '';
        }).join(", "),
        jamDensity: _.map(fds, function(fd) {
          return (fd != null ? fd.get('jam_density') : void 0) || '';
        }).join(", "),
        capacityDrop: _.map(fds, function(fd) {
          return (fd != null ? fd.get('capacity_drop') : void 0) || '';
        }).join(", "),
        criticalSpeed: _.map(fds, function(fd) {
          return (fd != null ? fd.get('critical_speed') : void 0) || '';
        }).join(", "),
        congestionSpeed: _.map(fds, function(fd) {
          return (fd != null ? fd.get('congestion_speed') : void 0) || '';
        }).join(", "),
        capacityStandardDev: _.map(fds, function(fd) {
          return (fd != null ? fd.get('std_dev_capacity') : void 0) || '';
        }).join(", "),
        congestionStandardDev: _.map(fds, function(fd) {
          return (fd != null ? fd.get('std_dev_congestion') : void 0) || '';
        }).join(", "),
        freeFlowStandardDev: _.map(fds, function(fd) {
          return (fd != null ? fd.get('std_dev_free_flow') : void 0) || '';
        }).join(", "),
        cpStartTime: $a.Util.convertSecondsToHoursMinSec((cp != null ? cp.get('start_time') : void 0) || 0),
        cpSampleTime: $a.Util.convertSecondsToHoursMinSec((cp != null ? cp.get('dt') : void 0) || 0),
        capacityProfile: (cp != null ? cp.get('text') : void 0) || '',
        knob: (dp != null ? dp.get('knob') : void 0) || '',
        dpStartTime: $a.Util.convertSecondsToHoursMinSec((dp != null ? dp.get('start_time') : void 0) || 0),
        dpSampleTime: $a.Util.convertSecondsToHoursMinSec((dp != null ? dp.get('dt') : void 0) || 0),
        demandProfile: (dp != null ? dp.get('text') : void 0) || ''
      };
    };

    EditorLinkView.prototype.save = function(e) {
      var fieldId, id;
      id = e.currentTarget.id;
      fieldId = id;
      if (id.indexOf("link") === 0) {
        fieldId = id.slice(5);
      }
      return _.each(this.models, function(m) {
        return m.set(fieldId, $("#" + id).val());
      });
    };

    EditorLinkView.prototype.saveDesc = function(e) {
      var id;
      id = e.currentTarget.id;
      return _.each(this.models, function(m) {
        return m.get('description').set('text', $("#" + id).val());
      });
    };

    EditorLinkView.prototype.saveFD = function(e) {
      var id;
      id = e.currentTarget.id;
      return _.each(this.models, function(m) {
        var p, ps;
        ps = m.get('fundamentaldiagramprofile');
        p = ps != null ? ps.get('fundamentaldiagram')[0] : void 0;
        return p != null ? p.set(id, $("#" + id).val()) : void 0;
      });
    };

    EditorLinkView.prototype.saveDP = function(e) {
      var args, eid;
      eid = e.currentTarget.id;
      if (e.currentTarget.id === 'dp_text') {
        eid = 'text';
      }
      args = {
        id: e.currentTarget.id,
        fieldId: eid,
        profile: 'demand'
      };
      return this._saveProfileData(args);
    };

    EditorLinkView.prototype.saveDPTime = function() {
      var args;
      args = {
        profile: 'demand'
      };
      return this._saveProfileTimeData(args);
    };

    EditorLinkView.prototype.saveCP = function(e) {
      var p;
      p = this.models[0].get('capacity');
      return p != null ? p.set('text', $("#" + e.currentTarget.id).val()) : void 0;
    };

    EditorLinkView.prototype.saveCPTime = function() {
      var args;
      args = {
        profile: 'capacity'
      };
      return this._saveProfileTimeData(args);
    };

    EditorLinkView.prototype._saveProfileData = function(args) {
      var id, p;
      id = args.id;
      p = this.models[0].get(args.profile);
      return p != null ? p.set(args.fieldId, $("#" + id).val()) : void 0;
    };

    EditorLinkView.prototype._saveProfileTimeData = function(args) {
      var p, sample, start;
      p = this.models[0].get(args.profile);
      start = {
        'h': $("#link_" + args.profile + "_start_hour").val(),
        'm': $("#link_" + args.profile + "_start_minute").val(),
        's': $("#link_" + args.profile + "_start_second").val()
      };
      sample = {
        'h': $("#link_" + args.profile + "_sample_hour").val(),
        'm': $("#link_" + args.profile + "_sample_minute").val(),
        's': $("#link_" + args.profile + "_sample_second").val()
      };
      if (p != null) {
        p.set('start_time', $a.Util.convertToSeconds(start));
      }
      return p != null ? p.set('dt', $a.Util.convertToSeconds(sample)) : void 0;
    };

    EditorLinkView.prototype.doSplit = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.subDivide = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.addLeftTurn = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.addRightTurn = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.chooseName = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.reverseLink = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.geomLine = function(e) {
      return e.preventDefault();
    };

    EditorLinkView.prototype.geomRoad = function(e) {
      return e.preventDefault();
    };

    return EditorLinkView;

  })(window.sirius.EditorView);

}).call(this);
