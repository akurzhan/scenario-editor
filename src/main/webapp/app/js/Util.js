// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.sirius.Util = {
    _round_dec: function(num, dec) {
      return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
    },
    _getLat: function(elem) {
      return this._getElementLatOrLng(elem, 'lat');
    },
    _getLng: function(elem) {
      return this._getElementLatOrLng(elem, 'lng');
    },
    _getElementLatOrLng: function(elem, type) {
      var pos;
      if (elem.get('position') != null) {
        pos = elem.get('position');
      } else if (elem.get('display_position') != null) {
        pos = elem.get('display_position');
      } else if (elem.get('node') != null) {
        pos = elem.get('node').get('position');
        this._offsetPosition(pos);
      } else if (elem.get('link') != null) {
        pos = elem.get('link').get('begin').get('node').get('position');
        this._offsetPosition(pos);
      }
      return pos.get('point')[0].get(type);
    },
    getLatLng: function(elem) {
      var roundLat, roundLng;
      if ((this._getLng(elem) != null) && (this._getLat(elem) != null)) {
        roundLat = this._round_dec(this._getLat(elem), 4);
        roundLng = this._round_dec(this._getLng(elem), 4);
        return new google.maps.LatLng(roundLat, roundLng);
      } else {
        return null;
      }
    },
    toLowerCaseAndDashed: function(text) {
      return text.toLowerCase().replace(/\ /g, "-");
    },
    toStandardCasing: function(elem) {
      var formattedWord, word, _i, _len, _ref;
      formattedWord = [];
      _ref = elem.split(/\s+/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        formattedWord.push(word[0].toUpperCase() + word.slice(1).toLowerCase());
      }
      return formattedWord.join(' ');
    },
    getElement: function(id, list) {
      return _.find(list, function(elem) {
        return elem.get('id') === id;
      });
    },
    _offsetPosition: function(pos) {
      return pos.get('point')[0].set({
        lng: pos.get('point')[0].get('lng') - .0002
      });
    },
    copy: function(items) {
      var _this = this;
      return _.map(items, function(item) {
        return {
          label: item.label,
          className: item.className,
          event: item.event
        };
      });
    },
    writeAndDownloadXML: function(xml, serverWrite, serverDownload) {
      var xhReq;
      xhReq = new XMLHttpRequest();
      xhReq.open("post", attrs.serverWrite, false);
      xhReq.setRequestHeader('Content-Type', "text/xml");
      xhReq.onload = function() {
        var elemIF;
        elemIF = document.createElement("iframe");
        elemIF.id = "download-iframe";
        elemIF.src = attrs.serverDownload;
        elemIF.style.display = "none";
        return $('body').append(elemIF);
      };
      return xhReq.send(new XMLSerializer().serializeToString(xml));
    },
    convertSecondsToHoursMinSec: function(secs) {
      var divisorMinutes, divisorSeconds, hours, minutes, seconds;
      hours = Math.floor(secs / 3600.);
      divisorMinutes = secs % 3600.;
      minutes = Math.floor(divisorMinutes / 60);
      divisorSeconds = divisorMinutes % 60;
      seconds = Math.ceil(divisorSeconds);
      return {
        "h": hours,
        "m": minutes,
        "s": seconds
      };
    },
    convertToSeconds: function(hms) {
      var seconds;
      seconds = hms['h'] * 3600;
      seconds += hms['m'] * 60;
      seconds += hms['s'] * 1;
      return seconds;
    },
    getDesc: function(models) {
      var desc;
      desc = _.map(models, function(m) {
        if (m.get('description') != null) {
          return m.get('description').get('text');
        }
      });
      if ((__indexOf.call(desc, void 0) >= 0)) {
        return desc = '';
      } else {
        return desc = desc.join("; ");
      }
    },
    saveDesc: function(opts) {
      return _.each(opts.models, function(m) {
        if (m.get('description') == null) {
          m.set('description', new $a.Description());
        }
        return m.get('description').set('text', $("#" + opts.id).val());
      });
    },
    getGeometry: function(opts) {
      return _.map(opts.models, function(m) {
        return m.get('position').get('point')[0].get(opts.geom);
      }).join(", ");
    }
  };

}).call(this);
