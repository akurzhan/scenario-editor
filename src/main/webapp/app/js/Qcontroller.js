// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.Qcontroller = (function(_super) {
    var $a;

    __extends(Qcontroller, _super);

    /* $a = alias for sirius namespace
    */


    function Qcontroller() {
      return Qcontroller.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    Qcontroller.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    Qcontroller.from_xml2 = function(xml, deferred, object_with_id) {
      var obj, parameters, type;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.Qcontroller();
      parameters = xml.children('parameters');
      obj.set('parameters', _.reduce(parameters.find("parameter"), function(acc, par_xml) {
        var wrapped_xml;
        wrapped_xml = $(par_xml);
        acc[wrapped_xml.attr('name')] = wrapped_xml.attr('value');
        return acc;
      }, {}));
      type = $(xml).attr('type');
      obj.set('type', type);
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    Qcontroller.prototype.to_xml = function(doc) {
      var parameters_xml, xml;
      xml = doc.createElement('qcontroller');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('parameters')) {
        parameters_xml = doc.createElement('parameters');
        _.each(this.get('parameters'), function(par_val, par_name) {
          var parameter_xml;
          parameter_xml = doc.createElement('parameter');
          parameter_xml.setAttribute(par_name, par_val);
          return parameters_xml.appendChild(parameter_xml);
        });
        xml.appendChild(parameters_xml);
      }
      if (this.has('type')) {
        xml.setAttribute('type', this.get('type'));
      }
      return xml;
    };

    Qcontroller.prototype.deep_copy = function() {
      return Qcontroller.from_xml1(this.to_xml(), {});
    };

    Qcontroller.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    Qcontroller.prototype.make_tree = function() {
      return null;
    };

    return Qcontroller;

  })(Backbone.Model);

}).call(this);
