// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.MapSignalView = (function(_super) {
    var $a;

    __extends(MapSignalView, _super);

    function MapSignalView() {
      return MapSignalView.__super__.constructor.apply(this, arguments);
    }

    MapSignalView.ICON = 'green-triangle';

    MapSignalView.SELECTED_ICON = 'red-triangle';

    $a = window.sirius;

    MapSignalView.prototype.initialize = function(model) {
      MapSignalView.__super__.initialize.call(this, model);
      this._contextMenu();
      $a.broker.on("map:select_neighbors:" + this.model.cid, this.selectSelfandMyNodes, this);
      $a.broker.on("map:clear_neighbors:" + this.model.cid, this.clearSelfandMyNodes, this);
      $a.broker.on('map:hide_signal_layer', this.hideMarker, this);
      return $a.broker.on('map:show_signal_layer', this.showMarker, this);
    };

    MapSignalView.prototype.getIcon = function() {
      return MapSignalView.__super__.getIcon.call(this, MapSignalView.ICON);
    };

    MapSignalView.prototype.removeElement = function() {
      $a.broker.off("map:select_neighbors:" + this.model.cid);
      $a.broker.off("map:clear_neighbors:" + this.model.cid);
      $a.broker.off('map:hide_signal_layer');
      $a.broker.off('map:show_signal_layer');
      return MapSignalView.__super__.removeElement.apply(this, arguments);
    };

    MapSignalView.prototype._contextMenu = function() {
      return MapSignalView.__super__._contextMenu.call(this, 'signal', $a.signal_context_menu);
    };

    MapSignalView.prototype.manageMarkerSelect = function() {
      var iconName;
      iconName = MapSignalView.__super__._getIconName.apply(this, []);
      if (iconName === ("" + MapSignalView.ICON + ".png")) {
        this._triggerClearSelectEvents();
        $a.broker.trigger("app:tree_highlight:" + this.model.cid);
        return this.makeSelected();
      } else {
        this._triggerClearSelectEvents();
        return this.clearSelected();
      }
    };

    MapSignalView.prototype._triggerClearSelectEvents = function() {
      if (!$a.SHIFT_DOWN) {
        $a.broker.trigger('map:clear_selected');
      }
      if (!$a.SHIFT_DOWN) {
        return $a.broker.trigger('app:tree_remove_highlight');
      }
    };

    MapSignalView.prototype.selectSelfandMyNodes = function() {
      this._triggerClearSelectEvents();
      this.makeSelected();
      $a.broker.trigger("map:select_item:" + (this.model.get('node').cid));
      return $a.broker.trigger("app:tree_highlight:" + (this.model.get('node').cid));
    };

    MapSignalView.prototype.clearSelfandMyNodes = function() {
      this.clearSelected();
      $a.broker.trigger("map:clear_item:" + (this.model.get('node').cid));
      return $a.broker.trigger("app:tree_remove_highlight:" + (this.model.get('node').cid));
    };

    MapSignalView.prototype.makeSelected = function() {
      return MapSignalView.__super__.makeSelected.call(this, MapSignalView.SELECTED_ICON);
    };

    MapSignalView.prototype.clearSelected = function() {
      return MapSignalView.__super__.clearSelected.call(this, MapSignalView.ICON);
    };

    return MapSignalView;

  })(window.sirius.MapMarkerView);

}).call(this);
