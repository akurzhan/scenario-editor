// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.FundamentalDiagram = (function(_super) {
    var $a;

    __extends(FundamentalDiagram, _super);

    /* $a = alias for sirius namespace
    */


    function FundamentalDiagram() {
      return FundamentalDiagram.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    FundamentalDiagram.from_xml1 = function(xml, object_with_id) {
      var deferred, fn, obj, _i, _len;
      deferred = [];
      obj = this.from_xml2(xml, deferred, object_with_id);
      for (_i = 0, _len = deferred.length; _i < _len; _i++) {
        fn = deferred[_i];
        fn();
      }
      return obj;
    };

    FundamentalDiagram.from_xml2 = function(xml, deferred, object_with_id) {
      var capacity, capacity_drop, congestion_speed, free_flow_speed, jam_density, obj, std_dev_capacity;
      if (!(xml != null) || xml.length === 0) {
        return null;
      }
      obj = new window.sirius.FundamentalDiagram();
      free_flow_speed = $(xml).attr('free_flow_speed');
      obj.set('free_flow_speed', Number(free_flow_speed));
      congestion_speed = $(xml).attr('congestion_speed');
      obj.set('congestion_speed', Number(congestion_speed));
      capacity = $(xml).attr('capacity');
      obj.set('capacity', Number(capacity));
      jam_density = $(xml).attr('jam_density');
      obj.set('jam_density', Number(jam_density));
      capacity_drop = $(xml).attr('capacity_drop');
      obj.set('capacity_drop', Number(capacity_drop));
      std_dev_capacity = $(xml).attr('std_dev_capacity');
      obj.set('std_dev_capacity', Number(std_dev_capacity));
      if (obj.resolve_references) {
        obj.resolve_references(deferred, object_with_id);
      }
      return obj;
    };

    FundamentalDiagram.prototype.to_xml = function(doc) {
      var xml;
      xml = doc.createElement('fundamentalDiagram');
      if (this.encode_references) {
        this.encode_references();
      }
      if (this.has('free_flow_speed')) {
        xml.setAttribute('free_flow_speed', this.get('free_flow_speed'));
      }
      if (this.has('congestion_speed')) {
        xml.setAttribute('congestion_speed', this.get('congestion_speed'));
      }
      if (this.has('capacity')) {
        xml.setAttribute('capacity', this.get('capacity'));
      }
      if (this.has('jam_density')) {
        xml.setAttribute('jam_density', this.get('jam_density'));
      }
      if (this.has('capacity_drop') && this.capacity_drop !== 0.0) {
        xml.setAttribute('capacity_drop', this.get('capacity_drop'));
      }
      if (this.has('std_dev_capacity')) {
        xml.setAttribute('std_dev_capacity', this.get('std_dev_capacity'));
      }
      return xml;
    };

    FundamentalDiagram.prototype.deep_copy = function() {
      return FundamentalDiagram.from_xml1(this.to_xml(), {});
    };

    FundamentalDiagram.prototype.inspect = function(depth, indent, orig_depth) {
      if (depth == null) {
        depth = 1;
      }
      if (indent == null) {
        indent = false;
      }
      if (orig_depth == null) {
        orig_depth = -1;
      }
      return null;
    };

    FundamentalDiagram.prototype.make_tree = function() {
      return null;
    };

    return FundamentalDiagram;

  })(Backbone.Model);

}).call(this);
