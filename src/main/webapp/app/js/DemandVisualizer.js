// Generated by CoffeeScript 1.3.3
(function() {
  var every, maxDev, padValueArray, topYVal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  every = function(count, arr) {
    return _.filter(arr, function(e, i) {
      return i % count === 0;
    });
  };

  maxDev = function(demand, demandProfile) {
    var knob, stdDevAdd, stdDevMult;
    stdDevAdd = demandProfile.get('std_dev_add') || 0;
    stdDevMult = demandProfile.get('std_dev_mult') || 0;
    knob = demandProfile.get('knob') || 1;
    return knob * Math.max(stdDevAdd, demand * stdDevMult);
  };

  topYVal = function(height, yScale, demand, demandProfile) {
    var boxMax, knob, stdDevAdd, stdDevMult;
    stdDevAdd = demandProfile.get('std_dev_add') || 0;
    stdDevMult = demandProfile.get('std_dev_mult') || 0;
    knob = demandProfile.get('knob') || 1;
    boxMax = knob * Math.max(demand + stdDevAdd, demand + (demand * stdDevMult));
    return height - yScale(boxMax);
  };

  padValueArray = function(arr) {
    return arr.push(_.last(arr));
  };

  window.sirius.DemandVisualizer = (function(_super) {
    var vehicleTypeColors;

    __extends(DemandVisualizer, _super);

    function DemandVisualizer() {
      return DemandVisualizer.__super__.constructor.apply(this, arguments);
    }

    vehicleTypeColors = ['#cc0000', '#cccc00', '#3300ff', '#33cc00', '#ccff00', '#333300', '#00ffff', '#66ccff', '#996600', '#9933ff'];

    DemandVisualizer.prototype.renderConstDemands = function(sel) {
      var constNotice, content, table, windowContent,
        _this = this;
      content = _.map(this.demand.demands_by_vehicle_type(), function(demand, idx) {
        var args, vehicleType;
        vehicleType = _this.typeOrder.get('vehicle_type')[idx].get('name');
        args = {
          elemId: _this.link.id,
          demandVehicleIndex: idx,
          demandVehicleType: vehicleType,
          demandVehicleCount: demand[0],
          deviates: false,
          demandDeviation: 0
        };
        if (maxDev(demand, _this.demand) > 0) {
          args['deviates'] = true;
          args['demandDeviation'] = maxDev(demand, _this.demand);
        }
        return _this.constDemand(args);
      });
      constNotice = "<div class='const-notice'>Demands Constant Over Time</div>";
      table = "<table>" + (content.join("\n")) + "</table>";
      windowContent = constNotice + table;
      return this.$el.html(this.vizWindow({
        elemId: this.link.id,
        content: windowContent
      }));
    };

    DemandVisualizer.prototype.renderLegend = function(graphEl) {
      var labelFontSize, legendLabelWidth, legendTitleWidth, textY, titleFontSize, titleWidth,
        _this = this;
      titleFontSize = 20;
      titleWidth = titleFontSize * 5;
      textY = titleFontSize + 10;
      labelFontSize = titleFontSize * 7 / 10;
      legendTitleWidth = 100;
      legendLabelWidth = 75;
      graphEl.append('svg:text').attr('x', 10).attr('y', textY).style('font-size', "" + titleFontSize + "px").text('Legend');
      return _.each(this.typeOrder.get('vehicle_type'), function(vtype, idx) {
        var name;
        name = vtype.get('name');
        graphEl.append('svg:text').attr('x', legendTitleWidth + legendLabelWidth * idx).attr('y', textY).style('font-size', "" + labelFontSize + "px").style('background-color', vehicleTypeColors[idx]).text(name);
        return graphEl.append('svg:rect').attr('id', "legend-" + idx).attr('x', titleWidth + legendLabelWidth * idx).attr('y', 10).attr('width', legendLabelWidth).attr('height', textY).attr('opacity', '0.4').attr('enabled', true).attr('fill', vehicleTypeColors[idx]).on('click', function() {
          var el;
          el = $(this);
          if (el.attr('enabled') === 'true') {
            el.attr('opacity', '0.0');
            el.attr('enabled', false);
            return d3.selectAll(".vehicle-graph-" + idx).style('visibility', 'hidden');
          } else {
            el.attr('opacity', '0.4');
            el.attr('enabled', true);
            return d3.selectAll(".vehicle-graph-" + idx).style('visibility', 'visible');
          }
        });
      });
    };

    DemandVisualizer.prototype.renderGraph = function(sel) {
      var axisGroup, dt, endTime, height, knob, labelFontSize, minHighlight, padding, startTime, stdDevAdd, stdDevMult, textSizeImprecisionOffset, timeSteps, valMax, vals, width, wrapSteps, xAxisSampleInterval, xAxisText, xScale, yAxisSampleInterval, yMaxGlobal, yScale,
        _this = this;
      labelFontSize = 10;
      textSizeImprecisionOffset = Math.ceil(.2 * labelFontSize);
      width = 450;
      height = 400;
      padding = 50;
      minHighlight = 3;
      this.$el.dialog('option', 'width', 510);
      this.$el.dialog('option', 'height', 510);
      this.graph = d3.select(sel).append('svg:svg').attr('width', width + padding).attr('height', height + padding);
      this.graph.append('svg:rect').attr('width', width + padding).attr('height', height + padding).attr('fill', 'white');
      this.graph.append('svg:rect').attr('id', 'legend').attr('x', 5).attr('y', 5).attr('width', width + padding - labelFontSize).attr('height', padding - labelFontSize - textSizeImprecisionOffset).attr('fill', 'white').attr('stroke', 'lightGray');
      this.renderLegend(this.graph);
      vals = this.demand.demands_by_vehicle_type();
      if (vals.length > 0) {
        startTime = this.demand.get('start_time') || 0;
        timeSteps = vals[0].length;
        dt = this.demand.get('dt');
        endTime = startTime + (dt * timeSteps);
        valMax = _.max(_.flatten(vals));
        stdDevAdd = this.demand.get('std_dev_add') || 0;
        stdDevMult = this.demand.get('std_dev_mult') || 0;
        knob = this.demand.get('knob') || 1;
        yMaxGlobal = knob * Math.max(valMax + stdDevAdd, valMax + valMax * stdDevMult);
        xScale = d3.scale.linear().domain([0, timeSteps]).range([0, width]);
        yScale = d3.scale.linear().domain([0, yMaxGlobal]).range([0, height]);
        axisGroup = this.graph.append('svg:g').attr('transform', "translate(" + padding + ", " + padding + ")");
        xAxisSampleInterval = 20;
        yAxisSampleInterval = yMaxGlobal / 20;
        axisGroup.selectAll('lines.xAxis').data(vals[0]).enter().append('svg:line').attr('x1', function(d, i) {
          return xScale(i);
        }).attr('x2', function(d, i) {
          return xScale(i);
        }).attr('y1', 0).attr('y2', height - labelFontSize - textSizeImprecisionOffset).attr('stroke', function(d, i) {
          if (i % xAxisSampleInterval === 0) {
            return 'darkGray';
          } else {
            return 'lightGray';
          }
        });
        axisGroup.selectAll('lines.yAxis').data(d3.range(yAxisSampleInterval, yMaxGlobal + yAxisSampleInterval, yAxisSampleInterval)).enter().append('svg:line').attr('x1', 0).attr('x2', width).attr('y1', function(d) {
          return yScale(d);
        }).attr('y2', function(d) {
          return yScale(d);
        }).attr('stroke', function(d, i) {
          if (i % 3 === 0) {
            return 'darkGray';
          } else {
            return 'lightGray';
          }
        });
        xAxisText = axisGroup.selectAll('text.xAxis').data(every(xAxisSampleInterval, vals[0])).enter().append('svg:text').attr('x', function(d, i) {
          return xScale(xAxisSampleInterval * i);
        }).attr('y', height - 2).attr('text-anchor', 'middle').style('font-size', "" + labelFontSize + "px").text(function(d, i) {
          var h, s;
          s = startTime + xAxisSampleInterval * i * dt;
          h = s / 3600;
          return Math.round(h * 10) / 10 + 'h';
        });
        axisGroup.selectAll('text.yAxis').data(d3.range(yAxisSampleInterval, yMaxGlobal + yAxisSampleInterval, yAxisSampleInterval)).enter().append('svg:text').attr('x', -padding + textSizeImprecisionOffset).attr('y', function(d) {
          return yScale(yMaxGlobal - d) + textSizeImprecisionOffset;
        }).style('font-size', "" + labelFontSize + "px").text(function(d) {
          return Math.round(d * 10) / 10;
        });
        wrapSteps = d3.svg.line().x(function(d, idx) {
          return xScale(idx) + padding;
        }).y(function(d) {
          return height + padding - yScale(d) - 2;
        }).interpolate('step-after');
        return _.each(vals, function(vehicleTypeVals, i) {
          var vehicleType;
          vehicleType = _this.typeOrder.get('vehicle_type')[i].get('name');
          padValueArray(vehicleTypeVals);
          _this.graph.append('svg:path').attr('d', wrapSteps(vehicleTypeVals)).attr('fill', 'none').attr('class', "vehicle-graph-" + i).attr('stroke', 'black');
          return _this.graph.selectAll('stdDevBoxes').data(vehicleTypeVals).enter().append('svg:rect').attr('x', function(d, idx) {
            return xScale(idx) + padding;
          }).attr('y', function(d) {
            return topYVal(height, yScale, d, _this.demand) + padding - textSizeImprecisionOffset;
          }).attr('width', xScale(1)).attr('fill', vehicleTypeColors[i]).attr('opacity', '0.4').attr('class', "vehicle-graph-" + i).attr('height', function(d) {
            var maxHeight, topY;
            maxHeight = yScale(Math.max(2 * stdDevAdd, 2 * stdDevMult * d));
            topY = topYVal(height, yScale, d, _this.demand) + padding - textSizeImprecisionOffset;
            if (maxHeight > height - topY + padding - labelFontSize) {
              return height - topY + padding - labelFontSize;
            } else {
              return Math.max(maxHeight, minHighlight);
            }
          });
        });
      }
    };

    DemandVisualizer.prototype.initialize = function(demand) {
      this.demand = demand;
      this.profileSet = window.sirius.models.get('demandprofileset');
      this.typeOrder = this.profileSet.get('vehicletypeorder');
      this.link = this.demand.get('link');
      this.vizWindow = _.template($('#demand-visualizer-window-template').html());
      if (this.demand.is_constant()) {
        this.constDemand = _.template($('#constant-demand-template').html());
      } else {
        this.dataDisplay = _.template($('#demand-graph-template').html());
        this.$el.html(this.vizWindow({
          elemId: this.link.id,
          content: this.dataDisplay({
            elemId: this.link.id
          })
        }));
      }
      return this.$el.attr('title', "Demand - Link " + (this.link.get('name')));
    };

    DemandVisualizer.prototype.render = function() {
      var _this = this;
      this.$el.dialog({
        autoOpen: false,
        modal: false,
        close: function() {
          return _this.$el.remove();
        }
      });
      if (this.demand.is_constant()) {
        this.renderConstDemands();
      } else {
        this.renderGraph("#demand-graph-" + this.link.id);
      }
      return this;
    };

    return DemandVisualizer;

  })(Backbone.View);

}).call(this);
