// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.sirius.TreeChildItemView = (function(_super) {
    var $a;

    __extends(TreeChildItemView, _super);

    function TreeChildItemView() {
      return TreeChildItemView.__super__.constructor.apply(this, arguments);
    }

    $a = window.sirius;

    TreeChildItemView.prototype.tagName = "li";

    TreeChildItemView.prototype.className = "file";

    TreeChildItemView.prototype.events = {
      click: 'manageHighlight',
      contextmenu: 'showContext'
    };

    TreeChildItemView.prototype.initialize = function(params) {
      var displayName, name;
      this.model = params.e;
      this.targets = params.targets;
      name = params.name;
      this.element = params.attach;
      this.highlighted = false;
      if (this.model != null) {
        this.id = "tree-item-" + this.targets[0].cid;
        $(this.el).attr('id', this.id);
      }
      displayName = name;
      this.template = _.template($('#child-item-menu-template').html());
      this.$el.html(this.template({
        text: displayName
      }));
      return this.setUpEvents();
    };

    TreeChildItemView.prototype.render = function() {
      $("#tree-parent-" + this.element).append(this.el);
      return this;
    };

    TreeChildItemView.prototype.setUpEvents = function() {
      $a.broker.on('app:child_trees', this.render, this);
      $a.broker.on('app:tree_remove_highlight', this.removeHighlight, this);
      return $a.broker.on('app:tree_clear', this.removeItem, this);
    };

    TreeChildItemView.prototype.manageHighlight = function() {
      var _this = this;
      if (!$a.SHIFT_DOWN) {
        $a.broker.trigger('map:clear_selected');
      }
      if (!$a.SHIFT_DOWN) {
        $a.broker.trigger('app:tree_remove_highlight');
      }
      if (!this.highlighted) {
        this.highlighted = true;
        if (this.targets != null) {
          _.each(this.targets, function(elem) {
            $a.broker.trigger("app:tree_highlight:" + elem.cid);
            return $a.broker.trigger("map:select_item:" + elem.cid);
          });
        }
        $a.broker.trigger("map:select_item:" + this.model.cid);
        return this.highlight();
      } else {
        this.highlighted = false;
        return this.removeHighlight();
      }
    };

    TreeChildItemView.prototype.highlight = function() {
      return $(this.el).addClass("highlight");
    };

    TreeChildItemView.prototype.removeHighlight = function() {
      return $(this.el).removeClass("highlight");
    };

    TreeChildItemView.prototype.removeItem = function() {
      var _this = this;
      $(this.el).remove();
      $a.broker.off('app:child_trees');
      if (this.targets != null) {
        _.each(this.targets, function(target) {
          $a.broker.off("app:tree_highlight:" + target.cid);
          return $a.broker.off("app:tree_remove_highlight:" + target.cid);
        });
      }
      $a.broker.off('app:tree_remove_highlight');
      return $a.broker.off('app:tree_clear');
    };

    TreeChildItemView.prototype.hideItem = function() {
      return this.$el.addClass('hide').removeClass('show');
    };

    TreeChildItemView.prototype.showItem = function() {
      return this.$el.addClass('show').removeClass('hide');
    };

    TreeChildItemView.prototype.showContext = function(e) {
      var item, position;
      position = {};
      position.x = e.clientX - 5;
      position.y = e.clientY - 5;
      item = null;
      if (this.targets != null) {
        item = this.targets[0];
      } else {
        item = this.model;
      }
      if (item.get('contextMenu') != null) {
        item.get('contextMenu').show(position);
      }
      return false;
    };

    return TreeChildItemView;

  })(Backbone.View);

}).call(this);
